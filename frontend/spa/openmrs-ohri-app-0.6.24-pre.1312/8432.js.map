{"version":3,"file":"8432.js","mappings":"oNAcA,MAGMA,EAAiC,CACrC,CACEC,IAAK,OACLC,OAAQ,mBACRC,SAAUC,GACDC,GAAAA,CAAOD,EAAUE,mBAAmBC,OAAO,gBAGtD,CACEN,IAAK,kBACLC,OAAQ,eACRC,SAAUC,IACDI,EAAAA,EAAAA,IAAoBJ,EAAWK,EAAAA,KAG1C,CACER,IAAK,WACLC,OAAQ,WACRC,SAAUC,GACDA,EAAUM,SAASC,MAG9B,CACEV,IAAK,gBACLC,OAAQ,kBACRC,SAAUC,IACDI,EAAAA,EAAAA,IAAoBJ,EA7BA,yCAgC/B,CACEH,IAAK,WACLC,OAAQ,eACRC,SAAUC,GACDA,EAAUQ,mBAAmBC,KAAIC,GAAKA,EAAEC,SAASJ,OAAMK,KAAK,QAGvE,CACEf,IAAK,UACLC,OAAQ,UACRC,SAAUC,IACR,MAIMa,GAAcC,EAAAA,EAAAA,IAAQd,EA9Cd,wCAgDd,MAAgB,QADCa,EALE,CACjB,uCAAwC,MACxC,uCAAwC,WAGAA,EAAYE,MAAMC,MAAQ,WAE3D,CACL,CACEC,KAAM,CAAEC,QAAS,MAAOX,KAAM,WAC9BY,cAAenB,EAAUgB,KACzBI,OAAQ,IACRC,MAAO,OACPC,KAAM,QAER,CACEL,KAAM,CAAEC,QAAS,MAAOX,KAAM,WAC9BY,cAAenB,EAAUgB,KACzBI,OAAQ,IACRC,MAAO,OACPC,KAAM,SAIL,CACL,CACEL,KAAM,CAAEC,QAAS,MAAOX,KAAM,OAC9BY,cAAenB,EAAUgB,KACzBI,OAAQ,IACRC,MAAO,OACPC,KAAM,QAER,CACEL,KAAM,CAAEC,QAAS,MAAOX,KAAM,OAC9BY,cAAenB,EAAUgB,KACzBI,OAAQ,IACRC,MAAO,OACPC,KAAM,YA8BhB,EAvBwD,EAAGC,YAAAA,MACzD,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,GAGjCC,EAAc,eAEpB,OACE,kBAAC,KAAD,CACEJ,YAAaA,EACbJ,cAP6B,uCAQ7BF,KAAM,CAAEC,QAAS,MAAOX,KAAM,OAC9BqB,MAAO,CACL,CAAEV,QAAS,MAAOX,KAAM,MAAOsB,YAAa,IAAKC,gBAAiB,IAClE,CAAEZ,QAAS,MAAOX,KAAM,UAAWsB,YAAa,IAAKC,gBAAiB,KAExElC,QAASA,EACTmC,YAAaJ,EACbA,YAAaA,EACbK,aAAa","sources":["webpack://openmrs-ohri-app/./src/pages/hiv/encounters-list/hts-overview-list.component.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport moment from 'moment';\nimport EncounterList, {\n  EncounterListColumn,\n  findObs,\n  getObsFromEncounter,\n} from '../../../components/encounter-list/encounter-list.component';\nimport { htsStrategyUUID } from '../../../constants';\n\ninterface HtsOverviewListProps {\n  patientUuid: string;\n}\n\nconst hivTestResultConceptUUID = 'e16b0068-b6a2-46b7-aba9-e3be00a7b4ab'; // HIV Result\nconst htsStrategy = 'f0d85da0-c235-4540-a0d1-63640594f98b';\n\nconst columns: EncounterListColumn[] = [\n  {\n    key: 'date',\n    header: 'Date of HIV Test',\n    getValue: encounter => {\n      return moment(encounter.encounterDatetime).format('DD-MMM-YYYY');\n    },\n  },\n  {\n    key: 'htsFormStrategy',\n    header: 'HTS Strategy',\n    getValue: encounter => {\n      return getObsFromEncounter(encounter, htsStrategyUUID);\n    },\n  },\n  {\n    key: 'location',\n    header: 'Location',\n    getValue: encounter => {\n      return encounter.location.name;\n    },\n  },\n  {\n    key: 'hivTestResult',\n    header: 'HIV Test result',\n    getValue: encounter => {\n      return getObsFromEncounter(encounter, hivTestResultConceptUUID);\n    },\n  },\n  {\n    key: 'provider',\n    header: 'HTS Provider',\n    getValue: encounter => {\n      return encounter.encounterProviders.map(p => p.provider.name).join(' | ');\n    },\n  },\n  {\n    key: 'actions',\n    header: 'Actions',\n    getValue: encounter => {\n      const strategies = {\n        '9de587b2-564d-4d86-bf72-e76da924018e': 'WHO',\n        '43105ef4-afde-4f33-89bd-fb318d3f07a3': 'Classic',\n      };\n      const strategyObs = findObs(encounter, htsStrategy);\n      const strategy = strategyObs ? strategies[strategyObs.value.uuid] : 'Classic';\n      if (strategy == 'WHO') {\n        return [\n          {\n            form: { package: 'hiv', name: 'hts_who' },\n            encounterUuid: encounter.uuid,\n            intent: '*',\n            label: 'View',\n            mode: 'view',\n          },\n          {\n            form: { package: 'hiv', name: 'hts_who' },\n            encounterUuid: encounter.uuid,\n            intent: '*',\n            label: 'Edit',\n            mode: 'edit',\n          },\n        ];\n      }\n      return [\n        {\n          form: { package: 'hiv', name: 'hts' },\n          encounterUuid: encounter.uuid,\n          intent: '*',\n          label: 'View',\n          mode: 'view',\n        },\n        {\n          form: { package: 'hiv', name: 'hts' },\n          encounterUuid: encounter.uuid,\n          intent: '*',\n          label: 'Edit',\n          mode: 'edit',\n        },\n      ];\n    },\n  },\n];\n\nconst HtsOverviewList: React.FC<HtsOverviewListProps> = ({ patientUuid }) => {\n  const [counter, setCounter] = useState(0);\n  const htsRetrospectiveTypeUUID = '79c1f50f-f77d-42e2-ad2a-d29304dde2fe'; // HTS Retrospective\n  const forceComponentUpdate = () => setCounter(counter + 1);\n  const headerTitle = 'HTS Sessions';\n\n  return (\n    <EncounterList\n      patientUuid={patientUuid}\n      encounterUuid={htsRetrospectiveTypeUUID}\n      form={{ package: 'hiv', name: 'hts' }}\n      forms={[\n        { package: 'hiv', name: 'hts', fixedIntent: '*', excludedIntents: [] },\n        { package: 'hiv', name: 'hts_who', fixedIntent: '*', excludedIntents: [] },\n      ]}\n      columns={columns}\n      description={headerTitle}\n      headerTitle={headerTitle}\n      dropdownText=\"Add\"\n    />\n  );\n};\n\nexport default HtsOverviewList;\n"],"names":["columns","key","header","getValue","encounter","moment","encounterDatetime","format","getObsFromEncounter","htsStrategyUUID","location","name","encounterProviders","map","p","provider","join","strategyObs","findObs","value","uuid","form","package","encounterUuid","intent","label","mode","patientUuid","counter","setCounter","useState","headerTitle","forms","fixedIntent","excludedIntents","description","dropdownText"],"sourceRoot":""}