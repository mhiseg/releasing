{"version":3,"file":"7648.js","mappings":"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","sources":["webpack://openmrs-ohri-app/./src/components/empty-state/table-empty-state.component.tsx","webpack://openmrs-ohri-app/./src/covid/home/summary-tiles/outcome-list-tile.component.tsx","webpack://openmrs-ohri-app/./src/covid/home/summary-tiles/covid-summary-tiles.component.tsx","webpack://openmrs-ohri-app/./src/pages/hiv/hts/summary-tiles/utils.ts"],"sourcesContent":["import {\n  DataTable,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from 'carbon-components-react';\nimport React from 'react';\n\nconst TableEmptyState: React.FC<{ tableHeaders: Array<{ key: string; header: string }>; message: string }> = ({\n  tableHeaders,\n  message,\n}) => {\n  return (\n    <div style={{ marginLeft: '-16px' }}>\n      <DataTable rows={[]} headers={tableHeaders} isSortable={true} size=\"short\" useZebraStyles={true}>\n        {({ headers, getHeaderProps, getTableProps }) => (\n          <TableContainer>\n            <Table {...getTableProps()}>\n              <TableHead>\n                <TableRow>\n                  {headers.map(header => (\n                    <TableHeader\n                      {...getHeaderProps({\n                        header,\n                        isSortable: header.isSortable,\n                      })}>\n                      {header.header?.content ?? header.header}\n                    </TableHeader>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow>\n                  <TableCell colSpan={tableHeaders.length}>{message}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n      </DataTable>\n    </div>\n  );\n};\n\nexport default TableEmptyState;\n","import { age, attach, detach, ExtensionSlot } from '@openmrs/esm-framework';\nimport { capitalize } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { fetchPatientCovidOutcome } from '../../../api/api';\nimport TableEmptyState from '../../../components/empty-state/table-empty-state.component';\nimport { getObsFromEncounter } from '../../../components/encounter-list/encounter-list.component';\nimport {\n  basePath,\n  covidEncounterDateTime_UUID,\n  covidOutcome,\n  covidOutcomeUUID,\n  covidPresentSymptonsConcept_UUID,\n} from '../../../constants';\nimport { filterFHIRPatientsByName } from '../../../pages/hiv/hts/summary-tiles/utils';\n\nexport const columns = [\n  {\n    key: 'name',\n    header: 'Name',\n    getValue: patient => {\n      return `${patient.name[0].given.join(' ')} ${patient.name[0].family}`;\n    },\n    link: {\n      getUrl: patient => `${basePath}${patient.id}/chart`,\n    },\n  },\n  {\n    key: 'gender',\n    header: 'Sex',\n    getValue: patient => {\n      return capitalize(patient.gender);\n    },\n  },\n  {\n    key: 'age',\n    header: 'Age',\n    getValue: patient => {\n      return age(patient.birthDate);\n    },\n  },\n  {\n    key: 'assessmentDate',\n    header: 'Assessment Date',\n    getValue: ({ latestEncounter }) => {\n      return getObsFromEncounter(latestEncounter, covidEncounterDateTime_UUID, true);\n    },\n  },\n  {\n    key: 'presentation',\n    header: 'Presentation',\n    getValue: ({ latestEncounter }) => {\n      return getObsFromEncounter(latestEncounter, covidPresentSymptonsConcept_UUID, false, true);\n    },\n  },\n  {\n    key: 'outcome',\n    header: 'Outcome',\n    getValue: ({ latestEncounter }) => {\n      return getObsFromEncounter(latestEncounter, covidOutcomeUUID);\n    },\n  },\n  {\n    key: 'outcomeDate',\n    header: 'Outcome Date',\n    getValue: ({ latestEncounter }) => {\n      return getObsFromEncounter(latestEncounter, covidOutcome);\n    },\n  },\n];\nexport const Outcomes: React.FC<{}> = () => {\n  const [patients, setPatients] = useState([]);\n  const [totalPatientCount, setTotalPatientCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(10);\n  const [searchTerm, setSearchTerm] = useState(null);\n  const [counter, setCounter] = useState(0);\n  const [filteredResults, setFilteredResults] = useState([]);\n  const [filteredResultsCounts, setFilteredResultsCounts] = useState(0);\n\n  useEffect(() => {\n    fetchPatientCovidOutcome().then((response: Array<any>) => {\n      setPatients(response.map(pat => pat.data));\n      setTotalPatientCount(response.length);\n      setIsLoading(false);\n    });\n  }, [pageSize, currentPage]);\n\n  useEffect(() => {\n    attach('outcomes-table-slot', 'patient-table');\n    return () => detach('outcomes-table-slot', 'patient-table');\n  }, []);\n\n  const pagination = useMemo(() => {\n    return {\n      usePagination: false,\n      currentPage: currentPage,\n      onChange: props => {\n        setCurrentPage(props.page);\n        setPageSize(props.pageSize);\n      },\n      pageSize: pageSize,\n      totalItems: searchTerm ? filteredResultsCounts : totalPatientCount,\n    };\n  }, [currentPage, filteredResultsCounts, pageSize, totalPatientCount, searchTerm]);\n\n  const handleSearch = useCallback(\n    searchTerm => {\n      setSearchTerm(searchTerm);\n      if (searchTerm) {\n        const filtrate = filterFHIRPatientsByName(searchTerm, patients);\n        setFilteredResults(filtrate);\n        setFilteredResultsCounts(filtrate.length);\n      }\n    },\n    [patients],\n  );\n\n  const state = useMemo(\n    () => ({\n      patients: searchTerm ? filteredResults : patients,\n      columns,\n      search: { placeHolder: 'Search client list', onSearch: handleSearch, currentSearchTerm: searchTerm },\n      pagination,\n      isLoading,\n      autoFocus: true,\n    }),\n    [searchTerm, filteredResults, patients, handleSearch, pagination, isLoading],\n  );\n\n  useEffect(() => {\n    setCounter(counter + 1);\n  }, [state]);\n\n  return (\n    <div style={{ width: '100%', marginBottom: '2rem' }}>\n      {!isLoading && !patients.length ? (\n        <TableEmptyState tableHeaders={columns} message=\"There are no patients in this list.\" />\n      ) : (\n        <ExtensionSlot extensionSlotName=\"outcomes-table-slot\" state={state} key={counter} />\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { getReportingCohort } from '../../../api/api';\nimport OHRIProgrammeSummaryTiles from '../../../components/tile/ohri-programme-summary-tiles.component';\nimport { covid19PositiveClients, covidOutcomesCohortUUID, covidVaccinatedClients } from '../../../constants';\nimport { Outcomes } from './outcome-list-tile.component';\n\nfunction CcoivdSummaryTiles({ launchWorkSpace }) {\n  const { t } = useTranslation();\n  const [activeClientsCount, setActiveClientsCount] = useState(100);\n  const [covidVaccinatedClientsCount, setCovidVaccinatedClients] = useState(0);\n  const [covid19PositiveClientsCount, setCovid19PositiveClientsCount] = useState(0);\n  const [PeopleWithCovidOutcome, setPeopleWithCovidOutcome] = useState(0);\n\n  useEffect(() => {\n    getReportingCohort(covidVaccinatedClients).then(data => {\n      setCovidVaccinatedClients(data.members.length);\n    });\n    getReportingCohort(covid19PositiveClients).then(data => {\n      setCovid19PositiveClientsCount(data.members.length);\n    });\n    getReportingCohort(covidOutcomesCohortUUID).then(data => {\n      setPeopleWithCovidOutcome(data.members.length);\n    });\n  }, []);\n  const tiles = [\n    {\n      title: t('assessments', 'Assessments'),\n      linkAddress: '#',\n      subTitle: t('testsConducted', 'Completed assessments'),\n      value: activeClientsCount,\n    },\n    {\n      title: t('cases', 'Cases'),\n      linkAddress: '#',\n      subTitle: t('peopleTestedPositive', 'People tested positive'),\n      value: covid19PositiveClientsCount,\n    },\n    {\n      title: t('vaccinations', 'Vaccinations'),\n      linkAddress: '#',\n      subTitle: t('peopleVaccinated', 'People vaccinated'),\n      value: covidVaccinatedClientsCount,\n    },\n    {\n      title: t('outcomes', 'Outcomes'),\n      linkAddress: '#',\n      subTitle: t('PeopleWithCovidOutcome', 'People with covid outcome'),\n      value: PeopleWithCovidOutcome,\n      onClick: () => {\n        launchWorkSpace('Covid Outcome', <Outcomes />, {\n          numberOfClients: PeopleWithCovidOutcome,\n          subTitle: 'Covid Outcome',\n          dateLastUpdated: '--',\n        });\n      },\n    },\n  ];\n  return <OHRIProgrammeSummaryTiles tiles={tiles} />;\n}\n\nexport default CcoivdSummaryTiles;\n","export const filterFHIRPatientsByName = (searchTerm: string, patients: Array<any>) => {\n  return patients.filter(\n    patient =>\n      `${patient.name[0].given.join(' ')} ${patient.name[0].family}`.toLowerCase().search(searchTerm.toLowerCase()) !==\n      -1,\n  );\n};\n"],"names":["tableHeaders","message","style","marginLeft","rows","headers","isSortable","size","useZebraStyles","getHeaderProps","getTableProps","map","header","content","colSpan","length","columns","key","getValue","patient","name","given","join","family","link","getUrl","basePath","id","capitalize","gender","age","birthDate","latestEncounter","getObsFromEncounter","covidEncounterDateTime_UUID","covidPresentSymptonsConcept_UUID","covidOutcomeUUID","covidOutcome","Outcomes","patients","setPatients","useState","totalPatientCount","setTotalPatientCount","isLoading","setIsLoading","currentPage","setCurrentPage","pageSize","setPageSize","searchTerm","setSearchTerm","counter","setCounter","filteredResults","setFilteredResults","filteredResultsCounts","setFilteredResultsCounts","useEffect","fetchPatientCovidOutcome","then","response","pat","data","attach","detach","pagination","useMemo","usePagination","onChange","props","page","totalItems","handleSearch","useCallback","filtrate","filterFHIRPatientsByName","state","search","placeHolder","onSearch","currentSearchTerm","autoFocus","width","marginBottom","ExtensionSlot","extensionSlotName","launchWorkSpace","useTranslation","activeClientsCount","setActiveClientsCount","covidVaccinatedClientsCount","setCovidVaccinatedClients","covid19PositiveClientsCount","setCovid19PositiveClientsCount","PeopleWithCovidOutcome","setPeopleWithCovidOutcome","getReportingCohort","covidVaccinatedClients","members","covid19PositiveClients","covidOutcomesCohortUUID","tiles","title","t","linkAddress","subTitle","value","onClick","numberOfClients","dateLastUpdated","filter","toLowerCase"],"sourceRoot":""}