{"version":3,"file":"736.js","mappings":"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","sources":["webpack://esm-ohri-covid-app/./src/api/api.ts","webpack://esm-ohri-covid-app/./src/components/patient-list-tabs/ohri-patient-list-tabs.scss?4e3a","webpack://esm-ohri-covid-app/./src/components/empty-state/table-empty-state.component.tsx","webpack://esm-ohri-covid-app/./src/components/modals/patient-list/add-patient-to-list-modal.component.tsx","webpack://esm-ohri-covid-app/./src/components/patient-lists/patient-list-cohort.scss?40ef","webpack://esm-ohri-covid-app/./src/components/patient-lists/patient-list-cohort.component.tsx","webpack://esm-ohri-covid-app/./src/components/patient-list-tabs/ohri-patient-list-tabs.component.tsx","webpack://esm-ohri-covid-app/./src/covid/home/patient-list-tabs/covid-patient-list-tabs.component.tsx","webpack://esm-ohri-covid-app/./src/components/patient-list-tabs/ohri-patient-list-tabs.scss","webpack://esm-ohri-covid-app/./src/components/patient-lists/patient-list-cohort.scss"],"sourcesContent":["import { openmrsFetch } from '@openmrs/esm-framework';\nimport moment from 'moment';\nimport { getObsFromEncounter } from '../components/encounter-list/encounter-list.component';\nimport {\n  finalHIVCodeConcept,\n  finalPositiveHIVValueConcept,\n  computedHIV_StatusConcept,\n  encounterRepresentation,\n  covidOutcomeUUID,\n  covid_Assessment_EncounterUUID,\n} from '../constants';\n\nconst BASE_WS_API_URL = '/ws/rest/v1/';\nconst BASE_FHIR_API_URL = '/ws/fhir2/R4/';\n\nexport function fetchLastVisit(uuid: string) {\n  return openmrsFetch(`/ws/fhir2/R4/Encounter?patient=${uuid}&_sort=-date&_count=1`);\n}\n\nexport function fetchPatientList(offSet: number = 1, pageSize: number = 10) {\n  return openmrsFetch(`/ws/fhir2/R4/Patient?_getpagesoffset=${offSet}&_count=${pageSize}`);\n}\n\nexport function fetchTodayClients() {\n  let date = moment().format('YYYY-MM-DD');\n  return openmrsFetch(`/ws/fhir2/R4/Encounter?date=${date}`).then(({ data }) => {\n    if (data.entry?.length) {\n      return cleanDuplicatePatientReferences(data);\n    }\n    return [];\n  });\n}\n\nexport function fetchPatientsFromObservationCodeConcept(\n  codeConcept: string,\n  valueConcept?: string,\n  cutOffDays?: number,\n) {\n  let endDate = moment().format('YYYY-MM-DD');\n  let startDate = moment()\n    .subtract(cutOffDays, 'days')\n    .format('YYYY-MM-DD');\n\n  return openmrsFetch(\n    `/ws/fhir2/R4/Observation?code=${codeConcept}${valueConcept ? `&value-concept=${valueConcept}` : ''}${\n      cutOffDays ? `&_lastUpdated=ge${startDate}&_lastUpdated=le${endDate}` : ''\n    }`,\n  ).then(({ data }) => {\n    if (data.entry?.length) {\n      return cleanDuplicatePatientReferences(data);\n    }\n    return [];\n  });\n}\n\nfunction cleanDuplicatePatientReferences(data) {\n  let patientRefs = data.entry.map(enc => {\n    return enc.resource.subject.reference;\n  });\n  patientRefs = new Set([...patientRefs]);\n  patientRefs = Array.from(patientRefs);\n  return Promise.all(\n    patientRefs.map(ref => {\n      return openmrsFetch(BASE_FHIR_API_URL + ref);\n    }),\n  );\n}\n\nexport function performPatientSearch(query, objectVersion) {\n  return openmrsFetch(`${BASE_WS_API_URL}/patient?q=${query}${objectVersion ? `&v=${objectVersion}` : ''}`, {\n    method: 'GET',\n  });\n}\n\nexport function getPatients(searchPhrase?: string, offset?: number, pageSize: number = 10) {\n  return openmrsFetch(\n    `/ws/fhir2/R4/Patient?_count=${pageSize}${searchPhrase ? `&name=${searchPhrase}` : ''}${\n      offset ? `&_getpagesoffset=${offset}` : ''\n    }`,\n    {\n      method: 'GET',\n    },\n  );\n}\n\nexport async function getCohort(cohortUuid: string, version?: string) {\n  const { data } = await openmrsFetch(\n    BASE_WS_API_URL + `cohortm/cohort/${cohortUuid}${version ? `?v=${version}` : ``}`,\n  );\n  data.cohortMembers = data.cohortMembers.filter(member => !member.voided);\n  return data;\n}\n\nexport async function getReportingCohort(cohortUuid: string, queryParams?: string[]) {\n  const params = queryParams ? queryParams.join('&') : '';\n  const url = params ? `reportingrest/cohort/${cohortUuid}?${params}` : `reportingrest/cohort/${cohortUuid}`;\n  const { data } = await openmrsFetch(BASE_WS_API_URL + url);\n  return data;\n}\n\nexport async function getReportingCohortMembers(cohortUuid: string, queryParams?: string[]) {\n  const params = queryParams ? queryParams.join('&') : '';\n  const url = params ? `reportingrest/cohort/${cohortUuid}?${params}` : `reportingrest/cohort/${cohortUuid}`;\n  const { data } = await openmrsFetch(BASE_WS_API_URL + url);\n  return Promise.all(\n    data.members.map(member => {\n      return openmrsFetch(BASE_WS_API_URL + `patient/${member.uuid}?v=full`);\n    }),\n  );\n}\n\nexport async function getCohorts(cohortTypeUuid?: string) {\n  const {\n    data: { results, error },\n  } = await openmrsFetch(\n    BASE_WS_API_URL +\n      `cohortm/cohort?v=custom:(uuid,name,voided)${cohortTypeUuid ? `&cohortType=${cohortTypeUuid}` : ''}`,\n  );\n  if (error) {\n    throw error;\n  }\n  return results.filter(cohort => !cohort.voided);\n}\n\nexport function addPatientToCohort(patientUuid: string, cohortUuid: string) {\n  return openmrsFetch(`${BASE_WS_API_URL}cohortm/cohortmember`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: {\n      patient: patientUuid,\n      cohort: cohortUuid,\n      startDate: new Date(),\n    },\n  });\n}\n\nexport function evictCohortMembership(membershipUuid: string) {\n  return openmrsFetch(`${BASE_WS_API_URL}cohortm/cohortmember/${membershipUuid}`, { method: 'DELETE' });\n}\n\nexport async function getPatientListsForPatient(patientUuid: string) {\n  const {\n    data: { results, error },\n  } = await openmrsFetch(`${BASE_WS_API_URL}cohortm/cohortmember?patient=${patientUuid}&v=full`);\n  if (error) {\n    throw error;\n  }\n  return results.filter(membership => !membership.voided);\n}\n\nexport function fetchPatientsFinalHIVStatus(patientUUID: string) {\n  return openmrsFetch(\n    `/ws/fhir2/R4/Observation?code=${finalHIVCodeConcept}&value-concept=${finalPositiveHIVValueConcept}&patient=${patientUUID}&_sort=-date&_count=1`,\n  ).then(({ data }) => {\n    if (data.entry?.length) {\n      return data.entry[0].resource.valueCodeableConcept.coding[0].display;\n    }\n    return 'Negative';\n  });\n}\n\nexport function fetchPatientObservationFromEncounter(\n  patientUUID: string,\n  encounterUUID: string,\n  observationCode: string,\n) {\n  return openmrsFetch(\n    `/ws/fhir2/R4/Observation?patient=${patientUUID}&encounter=${encounterUUID}&code=${observationCode}&_sort=-date&_count=1`,\n  );\n}\n\nexport function fetchPatientComputedConcept_HIV_Status(patientUUID: string) {\n  return openmrsFetch(\n    `/ws/fhir2/R4/Observation?code=${computedHIV_StatusConcept}&value-concept=${computedHIV_StatusConcept}&patient=${patientUUID}&_sort=-date&_count=1`,\n  ).then(({ data }) => {\n    if (data.entry?.length) {\n      return data.entry[0].resource.valueCodeableConcept.coding[0].display;\n    }\n    return 'Negative';\n  });\n}\n\n// TODO: the WS/REST Encounter resource doesn't support sorting, figure out a better approach ie. FHIR or Reporting\nexport function fetchPatientLastEncounter(patientUuid: string, encounterType) {\n  const query = `encounterType=${encounterType}&patient=${patientUuid}`;\n  return openmrsFetch(`/ws/rest/v1/encounter?${query}&v=${encounterRepresentation}`).then(({ data }) => {\n    if (data.results.length) {\n      return data.results[data.results.length - 1];\n    }\n\n    return null;\n  });\n}\n\nexport function fetchPatientCovidOutcome(patientUuid: string) {\n  //TODO: Continue logic to filter outcome\n  // const query = `encounterType=${covidOutcomeUUID}&patient=${patientUuid}`;\n  // return getObsFromEncounter(covid_Assessment_EncounterUUID, covidOutcomeUUID);\n  // });\n}\n\nexport function fetchConceptNameByUuid(conceptUuid: string) {\n  return openmrsFetch(`/ws/rest/v1/concept/${conceptUuid}/name?limit=1`).then(({ data }) => {\n    if (data.results.length) {\n      const concept = data.results[data.results.length - 1];\n      return concept.display;\n    }\n  });\n}\n","\n      import API from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../../../node_modules/openmrs/node_modules/sass-loader/dist/cjs.js!./ohri-patient-list-tabs.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../../../node_modules/openmrs/node_modules/sass-loader/dist/cjs.js!./ohri-patient-list-tabs.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import {\n  DataTable,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from 'carbon-components-react';\nimport React from 'react';\n\nconst TableEmptyState: React.FC<{ tableHeaders: Array<{ key: string; header: string }>; message: string }> = ({\n  tableHeaders,\n  message,\n}) => {\n  return (\n    <div style={{ marginLeft: '-16px' }}>\n      <DataTable rows={[]} headers={tableHeaders} isSortable={true} size=\"short\" useZebraStyles={true}>\n        {({ headers, getHeaderProps, getTableProps }) => (\n          <TableContainer>\n            <Table {...getTableProps()}>\n              <TableHead>\n                <TableRow>\n                  {headers.map(header => (\n                    <TableHeader\n                      {...getHeaderProps({\n                        header,\n                        isSortable: header.isSortable,\n                      })}>\n                      {header.header?.content ?? header.header}\n                    </TableHeader>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow>\n                  <TableCell colSpan={tableHeaders.length}>{message}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n      </DataTable>\n    </div>\n  );\n};\n\nexport default TableEmptyState;\n","import { showToast, useCurrentPatient } from '@openmrs/esm-framework';\nimport { ListItem, Modal, RadioButton, RadioButtonGroup, SkeletonText, UnorderedList } from 'carbon-components-react';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { addPatientToCohort, evictCohortMembership, getCohorts, getPatientListsForPatient } from '../../../api/api';\n\nconst AddPatientToListOverflowMenuItem: React.FC<{ patientUuid: string; displayText?: string }> = ({\n  patientUuid,\n  displayText,\n}) => {\n  const [, patient] = useCurrentPatient(patientUuid);\n  const [isOpen, setIsOpen] = useState(false);\n  const patientDisplay = useMemo(() => {\n    return patient ? `${patient.name[0].given.join(' ')} ${patient.name[0].family}` : 'Patient';\n  }, [patient]);\n\n  return (\n    <>\n      {isOpen && (\n        <AddPatientToListModal\n          isOpen={isOpen}\n          close={() => setIsOpen(false)}\n          patientUuid={patientUuid}\n          title={`Add ${patientDisplay} to list`}\n        />\n      )}\n      <li className=\"bx--overflow-menu-options__option\">\n        <button\n          className=\"bx--overflow-menu-options__btn\"\n          role=\"menuitem\"\n          title=\"Add to list\"\n          data-floating-menu-primary-focus\n          onClick={() => setIsOpen(true)}\n          style={{\n            maxWidth: '100vw',\n          }}>\n          <span className=\"bx--overflow-menu-options__option-content\">{displayText || 'Add to list'}</span>\n        </button>\n      </li>\n    </>\n  );\n};\n\nexport const AddPatientToListModal: React.FC<{\n  isOpen: boolean;\n  close: () => void;\n  patientUuid: string;\n  title?: string;\n  cohortType?: string;\n}> = ({ isOpen, close, patientUuid, cohortType, title }) => {\n  const [cohorts, setCohorts] = useState<Array<{ uuid: string; name: string }>>([]);\n  const [alreadySubscribedCohorts, setAlreadySubscribedCohorts] = useState([]);\n  const [currentMemberships, setCurrentMemberships] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedList, setSelectedList] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    Promise.all([getCohorts(cohortType), getPatientListsForPatient(patientUuid)]).then(\n      ([allCohortsRes, currentCohortMemberships]) => {\n        // filter out cohorts in which this patient is already a member\n        const filteredCohorts = allCohortsRes.filter(\n          cohort => !currentCohortMemberships.some(membership => cohort.uuid == membership.cohort.uuid),\n        );\n        setCohorts(filteredCohorts);\n        setCurrentMemberships(currentCohortMemberships);\n        setAlreadySubscribedCohorts(currentCohortMemberships.map(membership => membership.cohort));\n        setIsLoading(false);\n      },\n    );\n  }, [cohortType]);\n\n  const availableLists = useMemo(() => {\n    const controls = cohorts.map((cohort, index) => (\n      <RadioButton labelText={cohort.name} value={cohort.uuid} id={cohort.uuid} key={index} />\n    ));\n    controls.push(<RadioButton labelText=\"None\" value=\"none\" id=\"none\" />);\n    return controls;\n  }, [cohorts]);\n\n  const loader = useMemo(() => {\n    return (\n      <>\n        <SkeletonText width=\"60%\" />\n        <SkeletonText width=\"60%\" />\n      </>\n    );\n  }, []);\n\n  const alreadySubscribedLists = useMemo(() => {\n    if (alreadySubscribedCohorts.length) {\n      return (\n        <UnorderedList style={{ marginLeft: '1rem', marginBottom: '1rem', color: '#c6c6c6' }}>\n          {alreadySubscribedCohorts.map((cohort, index) => (\n            <ListItem key={index}>{cohort.name}</ListItem>\n          ))}\n        </UnorderedList>\n      );\n    }\n    return (\n      <div style={{ marginBottom: '1rem' }}>\n        <span style={{ fontSize: '.875rem', color: '#c6c6c6' }}>-- None --</span>\n      </div>\n    );\n  }, [alreadySubscribedCohorts]);\n\n  const handleSubmit = useCallback(() => {\n    setIsSubmitting(true);\n    if (selectedList == 'none') {\n      // evict all the patient's memberships\n      // according to our usecases, there is a high chance that the current memberships will always be one\n      // but we can't be sure\n      Promise.all(currentMemberships.map(membership => evictCohortMembership(membership.uuid)))\n        .then(results => {\n          showToast({\n            kind: 'success',\n            critical: true,\n            description: `Patient was successfully removed from all lists`,\n          });\n          close();\n        })\n        .catch(error => {\n          setIsSubmitting(false);\n        });\n    } else {\n      addPatientToCohort(patientUuid, selectedList).then(response => {\n        if (response.ok) {\n          showToast({\n            kind: 'success',\n            critical: true,\n            description: `Patient was successfully added to ${response.data.cohort.display}`,\n          });\n          close();\n        } else {\n          setIsSubmitting(false);\n        }\n      });\n    }\n  }, [selectedList, patientUuid, close, currentMemberships]);\n  return (\n    <>\n      <Modal\n        style={{ zIndex: 99999 }}\n        open={isOpen}\n        modalHeading={title || 'Add Patient to list'}\n        modalLabel=\"\"\n        onRequestClose={close}\n        passiveModal={false}\n        primaryButtonText=\"Confirm\"\n        secondaryButtonText=\"Cancel\"\n        onRequestSubmit={handleSubmit}\n        primaryButtonDisabled={\n          isLoading ||\n          selectedList == null ||\n          isSubmitting ||\n          (selectedList == 'none' && currentMemberships.length == 0)\n        }>\n        <div style={{ paddingLeft: '1rem', marginBottom: '2rem' }}>\n          <p style={{ marginBottom: '1rem' }}>Currently added to the list(s) below</p>\n          {isLoading ? loader : alreadySubscribedLists}\n          <p style={{ marginBottom: '1rem' }}>Select the list where to add the client</p>\n\n          {isLoading ? (\n            loader\n          ) : (\n            <RadioButtonGroup\n              legendText=\"\"\n              name=\"patient-lists\"\n              orientation=\"vertical\"\n              onChange={selected => setSelectedList(selected.toString())}>\n              {availableLists}\n            </RadioButtonGroup>\n          )}\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default AddPatientToListOverflowMenuItem;\n","\n      import API from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../../../node_modules/openmrs/node_modules/sass-loader/dist/cjs.js!./patient-list-cohort.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../../../node_modules/openmrs/node_modules/sass-loader/dist/cjs.js!./patient-list-cohort.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import { attach, detach, ExtensionSlot, navigate } from '@openmrs/esm-framework';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  fetchPatientLastEncounter,\n  fetchPatientsFinalHIVStatus,\n  getCohort,\n  getReportingCohortMembers,\n} from '../../api/api';\nimport moment from 'moment';\nimport TableEmptyState from '../empty-state/table-empty-state.component';\nimport { OverflowMenu, OverflowMenuItem, InlineLoading } from 'carbon-components-react';\nimport AddPatientToListOverflowMenuItem from '../modals/patient-list/add-patient-to-list-modal.component';\nimport { basePath } from '../../constants';\nimport { launchForm, launchFormInEditMode } from '../../utils/ohri-forms-commons';\nimport { getForm, applyFormIntent } from '../../utils/forms-loader';\nimport styles from './patient-list-cohort.scss';\n\nexport interface PatientListColumn {\n  key: string;\n  header: string;\n  getValue: (patient: any) => string;\n  link?: any;\n  index?: number;\n}\n\nexport const columns: PatientListColumn[] = [\n  {\n    key: 'name',\n    header: 'Name',\n    getValue: patient => {\n      return patient.name;\n    },\n    link: {\n      getUrl: patient => patient.url,\n    },\n  },\n  {\n    key: 'timeAddedToList',\n    header: 'Time Added To List',\n    getValue: patient => {\n      return patient.timeAddedToList;\n    },\n  },\n  {\n    key: 'waitingTime',\n    header: 'Waiting Time',\n    getValue: patient => {\n      return patient.waitingTime;\n    },\n  },\n  {\n    key: 'gender',\n    header: 'Sex',\n    getValue: patient => {\n      return patient.gender;\n    },\n  },\n  {\n    key: 'location',\n    header: 'Location',\n    getValue: patient => {\n      return patient.location;\n    },\n  },\n  {\n    key: 'age',\n    header: 'Age',\n    getValue: patient => {\n      return patient.age;\n    },\n  },\n  {\n    key: 'phoneNumber',\n    header: 'Phone Number',\n    getValue: patient => {\n      return patient.phoneNumber;\n    },\n  },\n  {\n    key: 'hivResult',\n    header: 'HIV Result',\n    getValue: patient => {\n      return patient.hivResult;\n    },\n  },\n  {\n    key: 'actions',\n    header: 'Actions',\n    getValue: patient => {\n      return patient.actions;\n    },\n  },\n];\n\nconst filterPatientsByName = (searchTerm: string, patients: Array<any>) => {\n  return patients.filter(patient => patient.name.toLowerCase().search(searchTerm.toLowerCase()) !== -1);\n};\n\nconst LaunchableFormMenuItem = ({ patientUuid, launchableForm, form, encounterType }) => {\n  const [actionText, setActionText] = useState(launchableForm.actionText);\n  const [encounterUuid, setEncounterUuid] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const continueEncounterActionText = launchableForm.editActionText || 'Continue encounter';\n\n  useEffect(() => {\n    if (launchableForm.editLatestEncounter && encounterType && !encounterUuid) {\n      setIsLoading(true);\n      fetchPatientLastEncounter(patientUuid, encounterType).then(lastHtsEncounter => {\n        if (lastHtsEncounter) {\n          setActionText(continueEncounterActionText);\n          setEncounterUuid(lastHtsEncounter.uuid);\n        }\n        setIsLoading(false);\n      });\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <InlineLoading style={{ margin: '0 auto', width: '16px' }} />\n      ) : (\n        <OverflowMenuItem\n          itemText={actionText}\n          onClick={() => {\n            if (encounterUuid) {\n              launchFormInEditMode(form, encounterUuid);\n            } else {\n              launchForm(form);\n            }\n            navigate({ to: `${basePath}${patientUuid}/chart/hts-summary` });\n          }}\n        />\n      )}\n    </>\n  );\n};\n\ninterface CohortPatientListProps {\n  cohortId: string;\n  cohortSlotName: string;\n  isReportingCohort?: boolean;\n  otherColumns?: Array<PatientListColumn>;\n  excludeColumns?: Array<string>;\n  queryParams?: Array<string>;\n  associatedEncounterType?: string;\n  launchableForm?: {\n    package: string;\n    name: string;\n    intent: string;\n    actionText: string;\n    // if true, the form will be opened in edit mode if an encounter is found\n    editLatestEncounter?: boolean;\n    // if provided, the latest encounter of this type will be edited\n    // if value is not provided and `editLatestEncounter` is true, the `associatedEncounterType` will be used\n    encounterType?: string;\n    editActionText?: string;\n    targetDashboard?: string;\n  };\n}\n\nconst CohortPatientList: React.FC<CohortPatientListProps> = ({\n  cohortId,\n  cohortSlotName,\n  isReportingCohort,\n  otherColumns,\n  excludeColumns,\n  queryParams,\n  associatedEncounterType,\n  launchableForm,\n}) => {\n  const [patients, setPatients] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadedPatients, setLoadedPatients] = useState(false);\n  const [loadedEncounters, setLoadedEncounters] = useState(false);\n  const [loadedHIVStatuses, setLoadedHIVStatuses] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(10);\n  const [patientsCount, setPatientsCount] = useState(0);\n  const [searchTerm, setSearchTerm] = useState(null);\n  const [counter, setCounter] = useState(0);\n  const [filteredResults, setFilteredResults] = useState([]);\n\n  const [allPatients, setAllPatients] = useState([]);\n\n  const columnAtLastIndex = 'actions';\n  const form = launchableForm && getForm(launchableForm.package, launchableForm.name);\n  const constructPatient = rawPatient => {\n    const patientUuid = isReportingCohort ? rawPatient.person.uuid : rawPatient.patient.uuid;\n    const dashboard = launchableForm?.targetDashboard ? `/${launchableForm?.targetDashboard}` : '';\n    return {\n      uuid: patientUuid,\n      id: isReportingCohort ? rawPatient.identifiers[0].identifier : rawPatient.patient.identifiers[0].identifier,\n      age: isReportingCohort ? rawPatient.person.age : rawPatient.patient.person.age,\n      name: isReportingCohort ? rawPatient.person.display : rawPatient.patient.person.display,\n      birthdate: isReportingCohort\n        ? moment(rawPatient.person.birthdate).format('DD-MMM-YYYY')\n        : moment(rawPatient.patient.person.birthdate).format('DD-MMM-YYYY'),\n      gender: isReportingCohort\n        ? rawPatient.person.gender == 'M'\n          ? 'Male'\n          : 'Female'\n        : rawPatient.patient.person.gender == 'M'\n        ? 'Male'\n        : 'Female',\n      birthday: isReportingCohort ? rawPatient.person.birthdate : rawPatient.patient.person.birthdate,\n      url: `${basePath}${patientUuid}/chart${dashboard}`,\n    };\n  };\n\n  const setListMeta = (patientWithMeta, location) => {\n    const patientUuid = !isReportingCohort ? patientWithMeta.patient.uuid : patientWithMeta.person.uuid;\n    return {\n      timeAddedToList: !isReportingCohort ? moment(patientWithMeta.startDate).format('LL') : null,\n      waitingTime: !isReportingCohort ? moment(patientWithMeta.startDate).fromNow() : null,\n      location: location && location.name,\n      phoneNumber: '0700xxxxxx',\n      hivResult: 'None',\n      actions: (\n        <OverflowMenu flipped>\n          {form ? (\n            <LaunchableFormMenuItem\n              patientUuid={patientUuid}\n              launchableForm={launchableForm}\n              form={applyFormIntent(launchableForm.intent, form)}\n              encounterType={launchableForm.encounterType || associatedEncounterType}\n              key={patientUuid}\n            />\n          ) : (\n            <></>\n          )}\n          <AddPatientToListOverflowMenuItem patientUuid={patientUuid} displayText=\"Move to list\" />\n        </OverflowMenu>\n      ),\n    };\n  };\n\n  const updatePatientTable = (fullDataset, start, itemCount) => {\n    let currentRows = [];\n\n    for (let i = start; i < start + itemCount; i++) {\n      if (i < fullDataset.length) {\n        currentRows.push(fullDataset[i]);\n      }\n    }\n\n    setPatients(currentRows);\n  };\n\n  useEffect(() => {\n    if (!isReportingCohort) {\n      getCohort(cohortId, 'full').then(results => {\n        const patients = results.cohortMembers.map(member => ({\n          ...constructPatient(member),\n          ...setListMeta(member, results.location),\n        }));\n\n        //Fix to enable pagination\n        setAllPatients(patients);\n        updatePatientTable(patients, 0, pageSize);\n\n        setIsLoading(false);\n        setLoadedPatients(true);\n      });\n    } else {\n      getReportingCohortMembers(cohortId, queryParams).then(results => {\n        const patients = results.map(({ data }) => {\n          return {\n            ...constructPatient(data),\n            ...setListMeta(data, null),\n          };\n        });\n\n        //Fix to enable Pagination\n        setAllPatients(patients);\n        updatePatientTable(patients, 0, pageSize);\n\n        setIsLoading(false);\n        setLoadedPatients(true);\n      });\n    }\n  }, [cohortId]);\n\n  useEffect(() => {\n    if (patients.length && associatedEncounterType && !loadedEncounters) {\n      Promise.all(patients.map(patient => fetchPatientLastEncounter(patient.uuid, associatedEncounterType))).then(\n        results => {\n          results.forEach((encounter, index) => {\n            patients[index].latestEncounter = encounter;\n            if (index == patients.length - 1) {\n              setPatients([...patients]);\n              setLoadedEncounters(true);\n            }\n          });\n        },\n      );\n    }\n    setPatientsCount(allPatients.length);\n  }, [loadedPatients]);\n\n  useEffect(() => {\n    const fetchHivResults = excludeColumns ? !excludeColumns.includes('hivResult') : true;\n    if ((loadedEncounters || !associatedEncounterType) && !loadedHIVStatuses && fetchHivResults) {\n      Promise.all(patients.map(patient => fetchPatientsFinalHIVStatus(patient.uuid))).then(results => {\n        results.forEach((hivResult, index) => {\n          patients[index].hivResult = hivResult;\n          if (index == patients.length - 1) {\n            setPatients([...patients]);\n            setLoadedHIVStatuses(true);\n          }\n        });\n      });\n    }\n  }, [patients, loadedEncounters]);\n\n  const pagination = useMemo(() => {\n    return {\n      usePagination: true,\n      currentPage: currentPage,\n      onChange: ({ pageSize, page }) => {\n        let startOffset = (page - 1) * pageSize;\n        updatePatientTable(allPatients, startOffset, pageSize);\n\n        setCurrentPage(page);\n        setPageSize(pageSize);\n        return null;\n      },\n      pageSize: pageSize,\n      totalItems: patientsCount,\n    };\n  }, [currentPage, pageSize, patientsCount]);\n\n  const handleSearch = useCallback(\n    searchTerm => {\n      setSearchTerm(searchTerm);\n      const filtrate = filterPatientsByName(searchTerm, patients);\n      setFilteredResults(filtrate);\n      return true;\n    },\n    [patients],\n  );\n\n  useEffect(() => {\n    attach(cohortSlotName, 'patient-table');\n    return () => {\n      detach(cohortSlotName, 'patient-table');\n    };\n  });\n\n  const state = useMemo(() => {\n    let filteredColumns = [...columns];\n    if (excludeColumns) {\n      filteredColumns = columns.filter(c => !excludeColumns.includes(c.key));\n    }\n    if (otherColumns) {\n      otherColumns.forEach(column => {\n        if (column.index) {\n          filteredColumns.splice(column.index, 0, column);\n        } else {\n          filteredColumns.push(column);\n        }\n      });\n    }\n    // position column designated to be at the last index\n    const index = filteredColumns.findIndex(column => column.key == columnAtLastIndex);\n    if (index) {\n      const column = filteredColumns[index];\n      filteredColumns.splice(index, 1);\n      filteredColumns.push(column);\n    }\n\n    return {\n      patients: searchTerm ? filteredResults : patients,\n      columns: filteredColumns,\n      isLoading,\n      search: {\n        placeHolder: 'Search client list',\n        onSearch: searchTerm => {\n          if (!searchTerm) {\n            // clear value\n            setSearchTerm('');\n          }\n        },\n        currentSearchTerm: searchTerm,\n        otherSearchProps: {\n          onKeyDown: e => {\n            if (e.keyCode == 13) {\n              handleSearch(e.target.value);\n            }\n          },\n          autoFocus: true,\n        },\n      },\n      pagination: pagination,\n      autoFocus: true,\n    };\n  }, [searchTerm, filteredResults, patients, handleSearch, pagination, isLoading, excludeColumns, otherColumns]);\n\n  useEffect(() => {\n    setCounter(counter + 1);\n  }, [state]);\n\n  return (\n    <div className={styles.table1}>\n      {!isLoading && !patients.length ? (\n        <TableEmptyState tableHeaders={state.columns} message=\"There are no patients in this list.\" />\n      ) : (\n        <>\n          <ExtensionSlot extensionSlotName={cohortSlotName} state={state} key={counter} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CohortPatientList;\n","import React from 'react';\nimport { Tabs, Tab } from 'carbon-components-react';\nimport styles from './ohri-patient-list-tabs.scss';\nimport CohortPatientList from '../patient-lists/patient-list-cohort.component';\n\nfunction OHRIPatientListTabs({ patientListConfigs }) {\n  return (\n    <Tabs type=\"container\" className={styles.tabContainer}>\n      {patientListConfigs.map((config, index) => {\n        return (\n          <Tab id={index} label={config.label}>\n            <CohortPatientList\n              cohortId={config.cohortId}\n              cohortSlotName={config.cohortSlotName}\n              isReportingCohort={config.isReportingCohort}\n              excludeColumns={config.excludeColumns}\n              otherColumns={config.otherColumns}\n              queryParams={config.queryParams}\n              associatedEncounterType={config.associatedEncounterType}\n              launchableForm={config.launchableForm}\n            />\n          </Tab>\n        );\n      })}\n    </Tabs>\n  );\n}\n\nexport default OHRIPatientListTabs;\n","import React from 'react';\nimport {\n  clientsAssessedForCovid,\n  clientsWithoutCovidOutcomes,\n  covidCaseAssessmentEncType,\n  covidClientsWithPendingLabResults,\n  covidOutcome,\n  covidTestType,\n  dateSpecimenCollected,\n  finalCovid19Result,\n  pcrTestResultDate,\n  rapidAntigenResultDate,\n} from '../../../constants';\nimport OHRIPatientListTabs from '../../../components/patient-list-tabs/ohri-patient-list-tabs.component';\nimport { useTranslation } from 'react-i18next';\nimport { getObsFromEncounter } from '../../../components/encounter-list/encounter-list.component';\nimport moment from 'moment';\n\nfunction CovidHomePatientTabs() {\n  const { t } = useTranslation();\n\n  const tabsConfigs = [\n    {\n      label: t('allCTClients', 'All COVID-19 Clients'),\n      cohortId: clientsAssessedForCovid,\n      isReportingCohort: true,\n      cohortSlotName: 'clients-assessed-for-covid-slot',\n      launchableForm: {\n        package: 'covid',\n        name: 'covid_assessment',\n        editActionText: 'Edit case assessment form',\n        editLatestEncounter: true,\n        targetDashboard: 'covid-assessments',\n      },\n      associatedEncounterType: covidCaseAssessmentEncType,\n      excludeColumns: ['timeAddedToList', 'waitingTime', 'location', 'phoneNumber', 'hivResult'],\n      otherColumns: [\n        {\n          key: 'assessmentDate',\n          header: 'Assessment date',\n          getValue: ({ latestEncounter }) => {\n            return latestEncounter && moment(latestEncounter.encounterDatetime).format('DD-MMM-YYYY');\n          },\n          index: 3,\n        },\n        {\n          key: 'finalAssessment',\n          header: 'Final result',\n          getValue: ({ latestEncounter }) => {\n            return getObsFromEncounter(latestEncounter, finalCovid19Result);\n          },\n        },\n        {\n          key: 'outcome',\n          header: 'Outcome',\n          getValue: ({ latestEncounter }) => {\n            return getObsFromEncounter(latestEncounter, covidOutcome);\n          },\n        },\n      ],\n    },\n    {\n      label: t('pendingLabResults', 'Pending lab results'),\n      cohortId: covidClientsWithPendingLabResults,\n      isReportingCohort: true,\n      cohortSlotName: 'pending-covid-lab-results-slot',\n      launchableForm: {\n        package: 'covid',\n        name: 'covid_lab_test',\n        editActionText: 'Enter test result',\n        editLatestEncounter: true,\n        targetDashboard: 'covid-lab-results',\n      },\n      excludeColumns: ['timeAddedToList', 'waitingTime', 'location', 'phoneNumber', 'hivResult'],\n      associatedEncounterType: covidCaseAssessmentEncType,\n      otherColumns: [\n        {\n          key: 'testDate',\n          header: 'Test Date',\n          getValue: ({ latestEncounter }) => {\n            return getObsFromEncounter(latestEncounter, dateSpecimenCollected, true);\n          },\n        },\n        {\n          key: 'testType',\n          header: 'Test Type',\n          getValue: ({ latestEncounter }) => {\n            return getObsFromEncounter(latestEncounter, covidTestType);\n          },\n        },\n      ],\n    },\n    {\n      label: t('undocumentedOutcomes', 'Undocumented Outcomes'),\n      cohortId: clientsWithoutCovidOutcomes,\n      isReportingCohort: true,\n      cohortSlotName: 'undocumented-outcomes-slot',\n      associatedEncounterType: covidCaseAssessmentEncType,\n      launchableForm: {\n        package: 'covid',\n        name: 'covid_outcome_tracking',\n        editActionText: 'Enter COVID-19 outcome',\n        editLatestEncounter: true,\n        targetDashboard: 'covid-outcomes',\n      },\n      excludeColumns: ['timeAddedToList', 'waitingTime', 'location', 'hivResult', 'phoneNumber'],\n      otherColumns: [\n        {\n          key: 'covidAssessmentDate',\n          header: 'COVID Assessment Date',\n          getValue: ({ latestEncounter }) => {\n            return latestEncounter && moment(latestEncounter.encounterDatetime).format('DD-MMM-YYYY');\n          },\n        },\n        {\n          key: 'covidDiagnosisDate',\n          header: 'COVID-19 Diagnosis Date',\n          getValue: ({ latestEncounter }) => {\n            const obs = latestEncounter?.obs?.find(observation => observation.concept.uuid === covidTestType);\n            const rapidAntigen = '6cd82734-3ba5-4165-b839-0750099d72bd';\n            if (obs) {\n              if (obs.value.name.uuid == rapidAntigen) {\n                // lookup Rapid test result date\n                return getObsFromEncounter(latestEncounter, rapidAntigenResultDate, true);\n              } else {\n                // loockup PCR test result date\n                return getObsFromEncounter(latestEncounter, pcrTestResultDate, true);\n              }\n            }\n            return '--';\n          },\n        },\n        {\n          key: 'covidOutcome',\n          header: 'COVID-19 Outcome',\n          getValue: ({ latestEncounter }) => {\n            return getObsFromEncounter(latestEncounter, covidOutcome);\n          },\n        },\n      ],\n    },\n  ];\n  return <OHRIPatientListTabs patientListConfigs={tabsConfigs} />;\n}\n\nexport default CovidHomePatientTabs;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \":root{--brand-01: #005d5d;--brand-02: #004144;--brand-light-01: #007d79}.esm-ohri-covid__ohri-patient-list-tabs__productiveHeading01___2OCxv{font-size:.875rem;font-weight:600;line-height:1.29;letter-spacing:.16px}.esm-ohri-covid__ohri-patient-list-tabs__productiveHeading02___20lUq{font-size:1rem;font-weight:600;line-height:1.375;letter-spacing:0}.esm-ohri-covid__ohri-patient-list-tabs__productiveHeading03___Eg_AU{font-size:1.25rem;font-weight:400;line-height:1.4;letter-spacing:0}.esm-ohri-covid__ohri-patient-list-tabs__productiveHeading04___2mJMz{font-size:1.75rem;font-weight:400;line-height:1.29;letter-spacing:0}.esm-ohri-covid__ohri-patient-list-tabs__productiveHeading05___299yU{font-size:2rem;font-weight:400;line-height:1.25;letter-spacing:0}.esm-ohri-covid__ohri-patient-list-tabs__productiveHeading06___2E8jq{font-size:2rem;font-weight:300;line-height:1.199;letter-spacing:0}.esm-ohri-covid__ohri-patient-list-tabs__bodyShort01___2YjnV{font-size:.875rem;font-weight:400;line-height:1.29;letter-spacing:.16px}.esm-ohri-covid__ohri-patient-list-tabs__helperText01___1j9FE{font-size:.75rem;line-height:1.34;letter-spacing:.32px}.esm-ohri-covid__ohri-patient-list-tabs__bodyShort02___1FjTF{font-size:1rem;font-weight:400;line-height:1.375;letter-spacing:0}.esm-ohri-covid__ohri-patient-list-tabs__bodyLong01___2MB17{font-size:.875rem;font-weight:400;line-height:1.43;letter-spacing:.16px}.esm-ohri-covid__ohri-patient-list-tabs__bodyLong02___2a3yk{font-size:1rem;font-weight:400;line-height:1.5;letter-spacing:0}.esm-ohri-covid__ohri-patient-list-tabs__label01___hgTKp{font-size:.75rem;font-weight:400;line-height:1.34;letter-spacing:.32px}.esm-ohri-covid__ohri-patient-list-tabs__text01___3jWOH{color:#161616}.esm-ohri-covid__ohri-patient-list-tabs__text02___3ZnqG{color:#525252}aside{background-color:#fff !important}.esm-ohri-covid__ohri-patient-list-tabs__container___megX5{margin-top:16px;margin-left:inherit;width:100%;overflow-y:hidden}.esm-ohri-covid__ohri-patient-list-tabs__tabContainer___d7jsH{margin-top:16px;padding-left:1rem;background-color:#fff}.esm-ohri-covid__ohri-patient-list-tabs__tabContainer___d7jsH li button{width:100% !important}\", \"\"]);\n// Exports\nexports.locals = {\n\t\"productiveHeading01\": \"esm-ohri-covid__ohri-patient-list-tabs__productiveHeading01___2OCxv\",\n\t\"productiveHeading02\": \"esm-ohri-covid__ohri-patient-list-tabs__productiveHeading02___20lUq\",\n\t\"productiveHeading03\": \"esm-ohri-covid__ohri-patient-list-tabs__productiveHeading03___Eg_AU\",\n\t\"productiveHeading04\": \"esm-ohri-covid__ohri-patient-list-tabs__productiveHeading04___2mJMz\",\n\t\"productiveHeading05\": \"esm-ohri-covid__ohri-patient-list-tabs__productiveHeading05___299yU\",\n\t\"productiveHeading06\": \"esm-ohri-covid__ohri-patient-list-tabs__productiveHeading06___2E8jq\",\n\t\"bodyShort01\": \"esm-ohri-covid__ohri-patient-list-tabs__bodyShort01___2YjnV\",\n\t\"helperText01\": \"esm-ohri-covid__ohri-patient-list-tabs__helperText01___1j9FE\",\n\t\"bodyShort02\": \"esm-ohri-covid__ohri-patient-list-tabs__bodyShort02___1FjTF\",\n\t\"bodyLong01\": \"esm-ohri-covid__ohri-patient-list-tabs__bodyLong01___2MB17\",\n\t\"bodyLong02\": \"esm-ohri-covid__ohri-patient-list-tabs__bodyLong02___2a3yk\",\n\t\"label01\": \"esm-ohri-covid__ohri-patient-list-tabs__label01___hgTKp\",\n\t\"text01\": \"esm-ohri-covid__ohri-patient-list-tabs__text01___3jWOH\",\n\t\"text02\": \"esm-ohri-covid__ohri-patient-list-tabs__text02___3ZnqG\",\n\t\"container\": \"esm-ohri-covid__ohri-patient-list-tabs__container___megX5\",\n\t\"tabContainer\": \"esm-ohri-covid__ohri-patient-list-tabs__tabContainer___d7jsH\"\n};\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \":root{--brand-01: #005d5d;--brand-02: #004144;--brand-light-01: #007d79}.esm-ohri-covid__patient-list-cohort__productiveHeading01___2xzUz{font-size:.875rem;font-weight:600;line-height:1.29;letter-spacing:.16px}.esm-ohri-covid__patient-list-cohort__productiveHeading02___2XlYI{font-size:1rem;font-weight:600;line-height:1.375;letter-spacing:0}.esm-ohri-covid__patient-list-cohort__productiveHeading03___2U9JT{font-size:1.25rem;font-weight:400;line-height:1.4;letter-spacing:0}.esm-ohri-covid__patient-list-cohort__productiveHeading04___1sndE{font-size:1.75rem;font-weight:400;line-height:1.29;letter-spacing:0}.esm-ohri-covid__patient-list-cohort__productiveHeading05___3NNLG{font-size:2rem;font-weight:400;line-height:1.25;letter-spacing:0}.esm-ohri-covid__patient-list-cohort__productiveHeading06___1tgd3{font-size:2rem;font-weight:300;line-height:1.199;letter-spacing:0}.esm-ohri-covid__patient-list-cohort__bodyShort01___aFwIr{font-size:.875rem;font-weight:400;line-height:1.29;letter-spacing:.16px}.esm-ohri-covid__patient-list-cohort__helperText01___1Ezg9{font-size:.75rem;line-height:1.34;letter-spacing:.32px}.esm-ohri-covid__patient-list-cohort__bodyShort02___1Z2oX{font-size:1rem;font-weight:400;line-height:1.375;letter-spacing:0}.esm-ohri-covid__patient-list-cohort__bodyLong01___KEHaG{font-size:.875rem;font-weight:400;line-height:1.43;letter-spacing:.16px}.esm-ohri-covid__patient-list-cohort__bodyLong02___3ZaxR{font-size:1rem;font-weight:400;line-height:1.5;letter-spacing:0}.esm-ohri-covid__patient-list-cohort__label01___2YUAj{font-size:.75rem;font-weight:400;line-height:1.34;letter-spacing:.32px}.esm-ohri-covid__patient-list-cohort__text01___2p1jb{color:#161616}.esm-ohri-covid__patient-list-cohort__text02___12VaQ{color:#525252}aside{background-color:#fff !important}.esm-ohri-covid__patient-list-cohort__contentSwitcherWrapper___1b2pD{padding-bottom:50px}.esm-ohri-covid__patient-list-cohort__contentSwitcherWrapper___1b2pD>div{width:150px;float:right}.esm-ohri-covid__patient-list-cohort__contentSwitcherWrapper___1b2pD button[aria-selected=true]{background-color:#007d79}\", \"\"]);\n// Exports\nexports.locals = {\n\t\"productiveHeading01\": \"esm-ohri-covid__patient-list-cohort__productiveHeading01___2xzUz\",\n\t\"productiveHeading02\": \"esm-ohri-covid__patient-list-cohort__productiveHeading02___2XlYI\",\n\t\"productiveHeading03\": \"esm-ohri-covid__patient-list-cohort__productiveHeading03___2U9JT\",\n\t\"productiveHeading04\": \"esm-ohri-covid__patient-list-cohort__productiveHeading04___1sndE\",\n\t\"productiveHeading05\": \"esm-ohri-covid__patient-list-cohort__productiveHeading05___3NNLG\",\n\t\"productiveHeading06\": \"esm-ohri-covid__patient-list-cohort__productiveHeading06___1tgd3\",\n\t\"bodyShort01\": \"esm-ohri-covid__patient-list-cohort__bodyShort01___aFwIr\",\n\t\"helperText01\": \"esm-ohri-covid__patient-list-cohort__helperText01___1Ezg9\",\n\t\"bodyShort02\": \"esm-ohri-covid__patient-list-cohort__bodyShort02___1Z2oX\",\n\t\"bodyLong01\": \"esm-ohri-covid__patient-list-cohort__bodyLong01___KEHaG\",\n\t\"bodyLong02\": \"esm-ohri-covid__patient-list-cohort__bodyLong02___3ZaxR\",\n\t\"label01\": \"esm-ohri-covid__patient-list-cohort__label01___2YUAj\",\n\t\"text01\": \"esm-ohri-covid__patient-list-cohort__text01___2p1jb\",\n\t\"text02\": \"esm-ohri-covid__patient-list-cohort__text02___12VaQ\",\n\t\"contentSwitcherWrapper\": \"esm-ohri-covid__patient-list-cohort__contentSwitcherWrapper___1b2pD\"\n};\nmodule.exports = exports;\n"],"names":["BASE_WS_API_URL","async","getCohort","cohortUuid","version","data","openmrsFetch","cohortMembers","filter","member","voided","getReportingCohort","queryParams","params","join","url","getReportingCohortMembers","Promise","all","members","map","uuid","getCohorts","cohortTypeUuid","results","error","cohort","addPatientToCohort","patientUuid","method","headers","body","patient","startDate","Date","evictCohortMembership","membershipUuid","getPatientListsForPatient","membership","fetchPatientsFinalHIVStatus","patientUUID","finalHIVCodeConcept","finalPositiveHIVValueConcept","then","entry","length","resource","valueCodeableConcept","coding","display","fetchPatientLastEncounter","encounterType","query","encounterRepresentation","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","undefined","tableHeaders","message","style","marginLeft","DataTable","rows","isSortable","size","useZebraStyles","getHeaderProps","getTableProps","TableContainer","Table","TableHead","TableRow","header","TableHeader","content","TableBody","TableCell","colSpan","AddPatientToListModal","isOpen","close","cohortType","title","cohorts","setCohorts","useState","alreadySubscribedCohorts","setAlreadySubscribedCohorts","currentMemberships","setCurrentMemberships","isLoading","setIsLoading","selectedList","setSelectedList","isSubmitting","setIsSubmitting","useEffect","allCohortsRes","currentCohortMemberships","filteredCohorts","some","availableLists","useMemo","controls","index","RadioButton","labelText","name","value","id","key","push","loader","SkeletonText","width","alreadySubscribedLists","UnorderedList","marginBottom","color","ListItem","fontSize","handleSubmit","useCallback","showToast","kind","critical","description","catch","response","ok","Modal","zIndex","open","modalHeading","modalLabel","onRequestClose","passiveModal","primaryButtonText","secondaryButtonText","onRequestSubmit","primaryButtonDisabled","paddingLeft","RadioButtonGroup","legendText","orientation","onChange","selected","toString","displayText","useCurrentPatient","setIsOpen","patientDisplay","given","family","className","role","onClick","maxWidth","columns","getValue","link","getUrl","timeAddedToList","waitingTime","gender","location","age","phoneNumber","hivResult","actions","LaunchableFormMenuItem","launchableForm","form","actionText","setActionText","encounterUuid","setEncounterUuid","continueEncounterActionText","editActionText","editLatestEncounter","lastHtsEncounter","InlineLoading","margin","OverflowMenuItem","itemText","launchFormInEditMode","launchForm","navigate","to","basePath","cohortId","cohortSlotName","isReportingCohort","otherColumns","excludeColumns","associatedEncounterType","patients","setPatients","loadedPatients","setLoadedPatients","loadedEncounters","setLoadedEncounters","loadedHIVStatuses","setLoadedHIVStatuses","currentPage","setCurrentPage","pageSize","setPageSize","patientsCount","setPatientsCount","searchTerm","setSearchTerm","counter","setCounter","filteredResults","setFilteredResults","allPatients","setAllPatients","getForm","package","constructPatient","rawPatient","person","dashboard","targetDashboard","identifiers","identifier","birthdate","moment","format","birthday","setListMeta","patientWithMeta","fromNow","OverflowMenu","flipped","applyFormIntent","intent","updatePatientTable","fullDataset","start","itemCount","currentRows","i","forEach","encounter","latestEncounter","fetchHivResults","includes","pagination","usePagination","page","totalItems","handleSearch","filtrate","toLowerCase","search","filterPatientsByName","attach","detach","state","filteredColumns","c","column","splice","findIndex","placeHolder","onSearch","currentSearchTerm","otherSearchProps","onKeyDown","e","keyCode","target","autoFocus","styles","ExtensionSlot","extensionSlotName","patientListConfigs","Tabs","type","config","Tab","label","t","useTranslation","tabsConfigs","clientsAssessedForCovid","covidCaseAssessmentEncType","encounterDatetime","getObsFromEncounter","finalCovid19Result","covidOutcome","covidClientsWithPendingLabResults","dateSpecimenCollected","covidTestType","clientsWithoutCovidOutcomes","obs","find","observation","concept","rapidAntigenResultDate","pcrTestResultDate","exports","___CSS_LOADER_API_IMPORT___","module","locals"],"sourceRoot":""}