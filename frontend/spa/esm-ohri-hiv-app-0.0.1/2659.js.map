{"version":3,"file":"2659.js","mappings":"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","sources":["webpack://esm-ohri-hiv-app/./src/api/api.ts","webpack://esm-ohri-hiv-app/./src/components/empty-state/table-empty-state.component.tsx","webpack://esm-ohri-hiv-app/./src/components/modals/patient-list/add-patient-to-list-modal.component.tsx","webpack://esm-ohri-hiv-app/../../node_modules/carbon-components-react/es/components/InlineLoading/InlineLoading.js","webpack://esm-ohri-hiv-app/./src/components/patient-lists/patient-list-cohort.scss?40ef","webpack://esm-ohri-hiv-app/./src/components/patient-lists/patient-list-cohort.component.tsx","webpack://esm-ohri-hiv-app/./src/components/patient-lists/patient-list-cohort.scss"],"sourcesContent":["import { openmrsFetch } from '@openmrs/esm-framework';\nimport moment from 'moment';\nimport { getObsFromEncounter } from '../components/encounter-list/encounter-list.component';\nimport {\n  finalHIVCodeConcept,\n  finalPositiveHIVValueConcept,\n  computedHIV_StatusConcept,\n  encounterRepresentation,\n  covidOutcomeUUID,\n  covid_Assessment_EncounterUUID,\n} from '../constants';\n\nconst BASE_WS_API_URL = '/ws/rest/v1/';\nconst BASE_FHIR_API_URL = '/ws/fhir2/R4/';\n\nexport function fetchLastVisit(uuid: string) {\n  return openmrsFetch(`/ws/fhir2/R4/Encounter?patient=${uuid}&_sort=-date&_count=1`);\n}\n\nexport function fetchPatientList(offSet: number = 1, pageSize: number = 10) {\n  return openmrsFetch(`/ws/fhir2/R4/Patient?_getpagesoffset=${offSet}&_count=${pageSize}`);\n}\n\nexport function fetchTodayClients() {\n  let date = moment().format('YYYY-MM-DD');\n  return openmrsFetch(`/ws/fhir2/R4/Encounter?date=${date}`).then(({ data }) => {\n    if (data.entry?.length) {\n      return cleanDuplicatePatientReferences(data);\n    }\n    return [];\n  });\n}\n\nexport function fetchPatientsFromObservationCodeConcept(\n  codeConcept: string,\n  valueConcept?: string,\n  cutOffDays?: number,\n) {\n  let endDate = moment().format('YYYY-MM-DD');\n  let startDate = moment()\n    .subtract(cutOffDays, 'days')\n    .format('YYYY-MM-DD');\n\n  return openmrsFetch(\n    `/ws/fhir2/R4/Observation?code=${codeConcept}${valueConcept ? `&value-concept=${valueConcept}` : ''}${\n      cutOffDays ? `&_lastUpdated=ge${startDate}&_lastUpdated=le${endDate}` : ''\n    }`,\n  ).then(({ data }) => {\n    if (data.entry?.length) {\n      return cleanDuplicatePatientReferences(data);\n    }\n    return [];\n  });\n}\n\nfunction cleanDuplicatePatientReferences(data) {\n  let patientRefs = data.entry.map(enc => {\n    return enc.resource.subject.reference;\n  });\n  patientRefs = new Set([...patientRefs]);\n  patientRefs = Array.from(patientRefs);\n  return Promise.all(\n    patientRefs.map(ref => {\n      return openmrsFetch(BASE_FHIR_API_URL + ref);\n    }),\n  );\n}\n\nexport function performPatientSearch(query, objectVersion) {\n  return openmrsFetch(`${BASE_WS_API_URL}/patient?q=${query}${objectVersion ? `&v=${objectVersion}` : ''}`, {\n    method: 'GET',\n  });\n}\n\nexport function getPatients(searchPhrase?: string, offset?: number, pageSize: number = 10) {\n  return openmrsFetch(\n    `/ws/fhir2/R4/Patient?_count=${pageSize}${searchPhrase ? `&name=${searchPhrase}` : ''}${\n      offset ? `&_getpagesoffset=${offset}` : ''\n    }`,\n    {\n      method: 'GET',\n    },\n  );\n}\n\nexport async function getCohort(cohortUuid: string, version?: string) {\n  const { data } = await openmrsFetch(\n    BASE_WS_API_URL + `cohortm/cohort/${cohortUuid}${version ? `?v=${version}` : ``}`,\n  );\n  data.cohortMembers = data.cohortMembers.filter(member => !member.voided);\n  return data;\n}\n\nexport async function getReportingCohort(cohortUuid: string, queryParams?: string[]) {\n  const params = queryParams ? queryParams.join('&') : '';\n  const url = params ? `reportingrest/cohort/${cohortUuid}?${params}` : `reportingrest/cohort/${cohortUuid}`;\n  const { data } = await openmrsFetch(BASE_WS_API_URL + url);\n  return data;\n}\n\nexport async function getReportingCohortMembers(cohortUuid: string, queryParams?: string[]) {\n  const params = queryParams ? queryParams.join('&') : '';\n  const url = params ? `reportingrest/cohort/${cohortUuid}?${params}` : `reportingrest/cohort/${cohortUuid}`;\n  const { data } = await openmrsFetch(BASE_WS_API_URL + url);\n  return Promise.all(\n    data.members.map(member => {\n      return openmrsFetch(BASE_WS_API_URL + `patient/${member.uuid}?v=full`);\n    }),\n  );\n}\n\nexport async function getCohorts(cohortTypeUuid?: string) {\n  const {\n    data: { results, error },\n  } = await openmrsFetch(\n    BASE_WS_API_URL +\n      `cohortm/cohort?v=custom:(uuid,name,voided)${cohortTypeUuid ? `&cohortType=${cohortTypeUuid}` : ''}`,\n  );\n  if (error) {\n    throw error;\n  }\n  return results.filter(cohort => !cohort.voided);\n}\n\nexport function addPatientToCohort(patientUuid: string, cohortUuid: string) {\n  return openmrsFetch(`${BASE_WS_API_URL}cohortm/cohortmember`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: {\n      patient: patientUuid,\n      cohort: cohortUuid,\n      startDate: new Date(),\n    },\n  });\n}\n\nexport function evictCohortMembership(membershipUuid: string) {\n  return openmrsFetch(`${BASE_WS_API_URL}cohortm/cohortmember/${membershipUuid}`, { method: 'DELETE' });\n}\n\nexport async function getPatientListsForPatient(patientUuid: string) {\n  const {\n    data: { results, error },\n  } = await openmrsFetch(`${BASE_WS_API_URL}cohortm/cohortmember?patient=${patientUuid}&v=full`);\n  if (error) {\n    throw error;\n  }\n  return results.filter(membership => !membership.voided);\n}\n\nexport function fetchPatientsFinalHIVStatus(patientUUID: string) {\n  return openmrsFetch(\n    `/ws/fhir2/R4/Observation?code=${finalHIVCodeConcept}&value-concept=${finalPositiveHIVValueConcept}&patient=${patientUUID}&_sort=-date&_count=1`,\n  ).then(({ data }) => {\n    if (data.entry?.length) {\n      return data.entry[0].resource.valueCodeableConcept.coding[0].display;\n    }\n    return 'Negative';\n  });\n}\n\nexport function fetchPatientObservationFromEncounter(\n  patientUUID: string,\n  encounterUUID: string,\n  observationCode: string,\n) {\n  return openmrsFetch(\n    `/ws/fhir2/R4/Observation?patient=${patientUUID}&encounter=${encounterUUID}&code=${observationCode}&_sort=-date&_count=1`,\n  );\n}\n\nexport function fetchPatientComputedConcept_HIV_Status(patientUUID: string) {\n  return openmrsFetch(\n    `/ws/fhir2/R4/Observation?code=${computedHIV_StatusConcept}&value-concept=${computedHIV_StatusConcept}&patient=${patientUUID}&_sort=-date&_count=1`,\n  ).then(({ data }) => {\n    if (data.entry?.length) {\n      return data.entry[0].resource.valueCodeableConcept.coding[0].display;\n    }\n    return 'Negative';\n  });\n}\n\n// TODO: the WS/REST Encounter resource doesn't support sorting, figure out a better approach ie. FHIR or Reporting\nexport function fetchPatientLastEncounter(patientUuid: string, encounterType) {\n  const query = `encounterType=${encounterType}&patient=${patientUuid}`;\n  return openmrsFetch(`/ws/rest/v1/encounter?${query}&v=${encounterRepresentation}`).then(({ data }) => {\n    if (data.results.length) {\n      return data.results[data.results.length - 1];\n    }\n\n    return null;\n  });\n}\n\nexport function fetchPatientCovidOutcome(patientUuid: string) {\n  //TODO: Continue logic to filter outcome\n  // const query = `encounterType=${covidOutcomeUUID}&patient=${patientUuid}`;\n  // return getObsFromEncounter(covid_Assessment_EncounterUUID, covidOutcomeUUID);\n  // });\n}\n\nexport function fetchConceptNameByUuid(conceptUuid: string) {\n  return openmrsFetch(`/ws/rest/v1/concept/${conceptUuid}/name?limit=1`).then(({ data }) => {\n    if (data.results.length) {\n      const concept = data.results[data.results.length - 1];\n      return concept.display;\n    }\n  });\n}\n","import {\n  DataTable,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from 'carbon-components-react';\nimport React from 'react';\n\nconst TableEmptyState: React.FC<{ tableHeaders: Array<{ key: string; header: string }>; message: string }> = ({\n  tableHeaders,\n  message,\n}) => {\n  return (\n    <div style={{ marginLeft: '-16px' }}>\n      <DataTable rows={[]} headers={tableHeaders} isSortable={true} size=\"short\" useZebraStyles={true}>\n        {({ headers, getHeaderProps, getTableProps }) => (\n          <TableContainer>\n            <Table {...getTableProps()}>\n              <TableHead>\n                <TableRow>\n                  {headers.map(header => (\n                    <TableHeader\n                      {...getHeaderProps({\n                        header,\n                        isSortable: header.isSortable,\n                      })}>\n                      {header.header?.content ?? header.header}\n                    </TableHeader>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow>\n                  <TableCell colSpan={tableHeaders.length}>{message}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n      </DataTable>\n    </div>\n  );\n};\n\nexport default TableEmptyState;\n","import { showToast, useCurrentPatient } from '@openmrs/esm-framework';\nimport { ListItem, Modal, RadioButton, RadioButtonGroup, SkeletonText, UnorderedList } from 'carbon-components-react';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { addPatientToCohort, evictCohortMembership, getCohorts, getPatientListsForPatient } from '../../../api/api';\n\nconst AddPatientToListOverflowMenuItem: React.FC<{ patientUuid: string; displayText?: string }> = ({\n  patientUuid,\n  displayText,\n}) => {\n  const [, patient] = useCurrentPatient(patientUuid);\n  const [isOpen, setIsOpen] = useState(false);\n  const patientDisplay = useMemo(() => {\n    return patient ? `${patient.name[0].given.join(' ')} ${patient.name[0].family}` : 'Patient';\n  }, [patient]);\n\n  return (\n    <>\n      {isOpen && (\n        <AddPatientToListModal\n          isOpen={isOpen}\n          close={() => setIsOpen(false)}\n          patientUuid={patientUuid}\n          title={`Add ${patientDisplay} to list`}\n        />\n      )}\n      <li className=\"bx--overflow-menu-options__option\">\n        <button\n          className=\"bx--overflow-menu-options__btn\"\n          role=\"menuitem\"\n          title=\"Add to list\"\n          data-floating-menu-primary-focus\n          onClick={() => setIsOpen(true)}\n          style={{\n            maxWidth: '100vw',\n          }}>\n          <span className=\"bx--overflow-menu-options__option-content\">{displayText || 'Add to list'}</span>\n        </button>\n      </li>\n    </>\n  );\n};\n\nexport const AddPatientToListModal: React.FC<{\n  isOpen: boolean;\n  close: () => void;\n  patientUuid: string;\n  title?: string;\n  cohortType?: string;\n}> = ({ isOpen, close, patientUuid, cohortType, title }) => {\n  const [cohorts, setCohorts] = useState<Array<{ uuid: string; name: string }>>([]);\n  const [alreadySubscribedCohorts, setAlreadySubscribedCohorts] = useState([]);\n  const [currentMemberships, setCurrentMemberships] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedList, setSelectedList] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    Promise.all([getCohorts(cohortType), getPatientListsForPatient(patientUuid)]).then(\n      ([allCohortsRes, currentCohortMemberships]) => {\n        // filter out cohorts in which this patient is already a member\n        const filteredCohorts = allCohortsRes.filter(\n          cohort => !currentCohortMemberships.some(membership => cohort.uuid == membership.cohort.uuid),\n        );\n        setCohorts(filteredCohorts);\n        setCurrentMemberships(currentCohortMemberships);\n        setAlreadySubscribedCohorts(currentCohortMemberships.map(membership => membership.cohort));\n        setIsLoading(false);\n      },\n    );\n  }, [cohortType]);\n\n  const availableLists = useMemo(() => {\n    const controls = cohorts.map((cohort, index) => (\n      <RadioButton labelText={cohort.name} value={cohort.uuid} id={cohort.uuid} key={index} />\n    ));\n    controls.push(<RadioButton labelText=\"None\" value=\"none\" id=\"none\" />);\n    return controls;\n  }, [cohorts]);\n\n  const loader = useMemo(() => {\n    return (\n      <>\n        <SkeletonText width=\"60%\" />\n        <SkeletonText width=\"60%\" />\n      </>\n    );\n  }, []);\n\n  const alreadySubscribedLists = useMemo(() => {\n    if (alreadySubscribedCohorts.length) {\n      return (\n        <UnorderedList style={{ marginLeft: '1rem', marginBottom: '1rem', color: '#c6c6c6' }}>\n          {alreadySubscribedCohorts.map((cohort, index) => (\n            <ListItem key={index}>{cohort.name}</ListItem>\n          ))}\n        </UnorderedList>\n      );\n    }\n    return (\n      <div style={{ marginBottom: '1rem' }}>\n        <span style={{ fontSize: '.875rem', color: '#c6c6c6' }}>-- None --</span>\n      </div>\n    );\n  }, [alreadySubscribedCohorts]);\n\n  const handleSubmit = useCallback(() => {\n    setIsSubmitting(true);\n    if (selectedList == 'none') {\n      // evict all the patient's memberships\n      // according to our usecases, there is a high chance that the current memberships will always be one\n      // but we can't be sure\n      Promise.all(currentMemberships.map(membership => evictCohortMembership(membership.uuid)))\n        .then(results => {\n          showToast({\n            kind: 'success',\n            critical: true,\n            description: `Patient was successfully removed from all lists`,\n          });\n          close();\n        })\n        .catch(error => {\n          setIsSubmitting(false);\n        });\n    } else {\n      addPatientToCohort(patientUuid, selectedList).then(response => {\n        if (response.ok) {\n          showToast({\n            kind: 'success',\n            critical: true,\n            description: `Patient was successfully added to ${response.data.cohort.display}`,\n          });\n          close();\n        } else {\n          setIsSubmitting(false);\n        }\n      });\n    }\n  }, [selectedList, patientUuid, close, currentMemberships]);\n  return (\n    <>\n      <Modal\n        style={{ zIndex: 99999 }}\n        open={isOpen}\n        modalHeading={title || 'Add Patient to list'}\n        modalLabel=\"\"\n        onRequestClose={close}\n        passiveModal={false}\n        primaryButtonText=\"Confirm\"\n        secondaryButtonText=\"Cancel\"\n        onRequestSubmit={handleSubmit}\n        primaryButtonDisabled={\n          isLoading ||\n          selectedList == null ||\n          isSubmitting ||\n          (selectedList == 'none' && currentMemberships.length == 0)\n        }>\n        <div style={{ paddingLeft: '1rem', marginBottom: '2rem' }}>\n          <p style={{ marginBottom: '1rem' }}>Currently added to the list(s) below</p>\n          {isLoading ? loader : alreadySubscribedLists}\n          <p style={{ marginBottom: '1rem' }}>Select the list where to add the client</p>\n\n          {isLoading ? (\n            loader\n          ) : (\n            <RadioButtonGroup\n              legendText=\"\"\n              name=\"patient-lists\"\n              orientation=\"vertical\"\n              onChange={selected => setSelectedList(selected.toString())}>\n              {availableLists}\n            </RadioButtonGroup>\n          )}\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default AddPatientToListOverflowMenuItem;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"success\", \"status\", \"iconDescription\", \"description\", \"onSuccess\", \"successDelay\"];\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { CheckmarkFilled16, ErrorFilled16 } from '@carbon/icons-react';\nimport deprecate from '../../prop-types/deprecate';\nimport Loading from '../Loading';\nimport { usePrefix } from '../../internal/usePrefix';\nexport default function InlineLoading(_ref) {\n  var className = _ref.className,\n      success = _ref.success,\n      _ref$status = _ref.status,\n      status = _ref$status === void 0 ? success ? 'finished' : 'active' : _ref$status,\n      iconDescription = _ref.iconDescription,\n      description = _ref.description,\n      onSuccess = _ref.onSuccess,\n      successDelay = _ref.successDelay,\n      other = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  var loadingClasses = classNames(\"\".concat(prefix, \"--inline-loading\"), className);\n\n  var getLoading = function getLoading() {\n    if (status === 'error') {\n      return /*#__PURE__*/React.createElement(ErrorFilled16, {\n        className: \"\".concat(prefix, \"--inline-loading--error\")\n      }, /*#__PURE__*/React.createElement(\"title\", null, iconDescription));\n    }\n\n    if (status === 'finished') {\n      setTimeout(function () {\n        if (onSuccess) {\n          onSuccess();\n        }\n      }, successDelay);\n      return /*#__PURE__*/React.createElement(CheckmarkFilled16, {\n        className: \"\".concat(prefix, \"--inline-loading__checkmark-container\")\n      }, /*#__PURE__*/React.createElement(\"title\", null, iconDescription));\n    }\n\n    if (status === 'inactive' || status === 'active') {\n      return /*#__PURE__*/React.createElement(Loading, {\n        small: true,\n        description: iconDescription,\n        withOverlay: false,\n        active: status === 'active'\n      });\n    }\n\n    return undefined;\n  };\n\n  var loadingText = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-loading__text\")\n  }, description);\n  var loading = getLoading();\n  var loadingAnimation = loading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-loading__animation\")\n  }, loading);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: loadingClasses\n  }, other, {\n    \"aria-live\": 'assertive' || other['aria-live']\n  }), loadingAnimation, description && loadingText);\n}\nInlineLoading.propTypes = {\n  /**\n   * Specify a custom className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the description for the inline loading text\n   */\n  description: PropTypes.node,\n\n  /**\n   * Specify the description for the inline loading text\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Provide an optional handler to be invoked when <InlineLoading> is\n   * successful\n   */\n  onSuccess: PropTypes.func,\n\n  /**\n   * Specify the loading status\n   */\n  status: PropTypes.oneOf(['inactive', 'active', 'finished', 'error']),\n\n  /**\n   * Specify whether the load was successful\n   */\n  success: deprecate(PropTypes.bool, \"\\nThe prop `success` for InlineLoading has been deprecated in favor of `status`. Please use `status=\\\"finished\\\"` instead.\"),\n\n  /**\n   * Provide a delay for the `setTimeout` for success\n   */\n  successDelay: PropTypes.number\n};\nInlineLoading.defaultProps = {\n  successDelay: 1500\n};","\n      import API from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/openmrs/node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../../../node_modules/openmrs/node_modules/sass-loader/dist/cjs.js!./patient-list-cohort.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!../../../../../node_modules/openmrs/node_modules/sass-loader/dist/cjs.js!./patient-list-cohort.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import { attach, detach, ExtensionSlot, navigate } from '@openmrs/esm-framework';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  fetchPatientLastEncounter,\n  fetchPatientsFinalHIVStatus,\n  getCohort,\n  getReportingCohortMembers,\n} from '../../api/api';\nimport moment from 'moment';\nimport TableEmptyState from '../empty-state/table-empty-state.component';\nimport { OverflowMenu, OverflowMenuItem, InlineLoading } from 'carbon-components-react';\nimport AddPatientToListOverflowMenuItem from '../modals/patient-list/add-patient-to-list-modal.component';\nimport { basePath } from '../../constants';\nimport { launchForm, launchFormInEditMode } from '../../utils/ohri-forms-commons';\nimport { getForm, applyFormIntent } from '../../utils/forms-loader';\nimport styles from './patient-list-cohort.scss';\n\nexport interface PatientListColumn {\n  key: string;\n  header: string;\n  getValue: (patient: any) => string;\n  link?: any;\n  index?: number;\n}\n\nexport const columns: PatientListColumn[] = [\n  {\n    key: 'name',\n    header: 'Name',\n    getValue: patient => {\n      return patient.name;\n    },\n    link: {\n      getUrl: patient => patient.url,\n    },\n  },\n  {\n    key: 'timeAddedToList',\n    header: 'Time Added To List',\n    getValue: patient => {\n      return patient.timeAddedToList;\n    },\n  },\n  {\n    key: 'waitingTime',\n    header: 'Waiting Time',\n    getValue: patient => {\n      return patient.waitingTime;\n    },\n  },\n  {\n    key: 'gender',\n    header: 'Sex',\n    getValue: patient => {\n      return patient.gender;\n    },\n  },\n  {\n    key: 'location',\n    header: 'Location',\n    getValue: patient => {\n      return patient.location;\n    },\n  },\n  {\n    key: 'age',\n    header: 'Age',\n    getValue: patient => {\n      return patient.age;\n    },\n  },\n  {\n    key: 'phoneNumber',\n    header: 'Phone Number',\n    getValue: patient => {\n      return patient.phoneNumber;\n    },\n  },\n  {\n    key: 'hivResult',\n    header: 'HIV Result',\n    getValue: patient => {\n      return patient.hivResult;\n    },\n  },\n  {\n    key: 'actions',\n    header: 'Actions',\n    getValue: patient => {\n      return patient.actions;\n    },\n  },\n];\n\nconst filterPatientsByName = (searchTerm: string, patients: Array<any>) => {\n  return patients.filter(patient => patient.name.toLowerCase().search(searchTerm.toLowerCase()) !== -1);\n};\n\nconst LaunchableFormMenuItem = ({ patientUuid, launchableForm, form, encounterType }) => {\n  const [actionText, setActionText] = useState(launchableForm.actionText);\n  const [encounterUuid, setEncounterUuid] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const continueEncounterActionText = launchableForm.editActionText || 'Continue encounter';\n\n  useEffect(() => {\n    if (launchableForm.editLatestEncounter && encounterType && !encounterUuid) {\n      setIsLoading(true);\n      fetchPatientLastEncounter(patientUuid, encounterType).then(lastHtsEncounter => {\n        if (lastHtsEncounter) {\n          setActionText(continueEncounterActionText);\n          setEncounterUuid(lastHtsEncounter.uuid);\n        }\n        setIsLoading(false);\n      });\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <InlineLoading style={{ margin: '0 auto', width: '16px' }} />\n      ) : (\n        <OverflowMenuItem\n          itemText={actionText}\n          onClick={() => {\n            if (encounterUuid) {\n              launchFormInEditMode(form, encounterUuid);\n            } else {\n              launchForm(form);\n            }\n            navigate({ to: `${basePath}${patientUuid}/chart/hts-summary` });\n          }}\n        />\n      )}\n    </>\n  );\n};\n\ninterface CohortPatientListProps {\n  cohortId: string;\n  cohortSlotName: string;\n  isReportingCohort?: boolean;\n  otherColumns?: Array<PatientListColumn>;\n  excludeColumns?: Array<string>;\n  queryParams?: Array<string>;\n  associatedEncounterType?: string;\n  launchableForm?: {\n    package: string;\n    name: string;\n    intent: string;\n    actionText: string;\n    // if true, the form will be opened in edit mode if an encounter is found\n    editLatestEncounter?: boolean;\n    // if provided, the latest encounter of this type will be edited\n    // if value is not provided and `editLatestEncounter` is true, the `associatedEncounterType` will be used\n    encounterType?: string;\n    editActionText?: string;\n    targetDashboard?: string;\n  };\n}\n\nconst CohortPatientList: React.FC<CohortPatientListProps> = ({\n  cohortId,\n  cohortSlotName,\n  isReportingCohort,\n  otherColumns,\n  excludeColumns,\n  queryParams,\n  associatedEncounterType,\n  launchableForm,\n}) => {\n  const [patients, setPatients] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadedPatients, setLoadedPatients] = useState(false);\n  const [loadedEncounters, setLoadedEncounters] = useState(false);\n  const [loadedHIVStatuses, setLoadedHIVStatuses] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(10);\n  const [patientsCount, setPatientsCount] = useState(0);\n  const [searchTerm, setSearchTerm] = useState(null);\n  const [counter, setCounter] = useState(0);\n  const [filteredResults, setFilteredResults] = useState([]);\n\n  const [allPatients, setAllPatients] = useState([]);\n\n  const columnAtLastIndex = 'actions';\n  const form = launchableForm && getForm(launchableForm.package, launchableForm.name);\n  const constructPatient = rawPatient => {\n    const patientUuid = isReportingCohort ? rawPatient.person.uuid : rawPatient.patient.uuid;\n    const dashboard = launchableForm?.targetDashboard ? `/${launchableForm?.targetDashboard}` : '';\n    return {\n      uuid: patientUuid,\n      id: isReportingCohort ? rawPatient.identifiers[0].identifier : rawPatient.patient.identifiers[0].identifier,\n      age: isReportingCohort ? rawPatient.person.age : rawPatient.patient.person.age,\n      name: isReportingCohort ? rawPatient.person.display : rawPatient.patient.person.display,\n      birthdate: isReportingCohort\n        ? moment(rawPatient.person.birthdate).format('DD-MMM-YYYY')\n        : moment(rawPatient.patient.person.birthdate).format('DD-MMM-YYYY'),\n      gender: isReportingCohort\n        ? rawPatient.person.gender == 'M'\n          ? 'Male'\n          : 'Female'\n        : rawPatient.patient.person.gender == 'M'\n        ? 'Male'\n        : 'Female',\n      birthday: isReportingCohort ? rawPatient.person.birthdate : rawPatient.patient.person.birthdate,\n      url: `${basePath}${patientUuid}/chart${dashboard}`,\n    };\n  };\n\n  const setListMeta = (patientWithMeta, location) => {\n    const patientUuid = !isReportingCohort ? patientWithMeta.patient.uuid : patientWithMeta.person.uuid;\n    return {\n      timeAddedToList: !isReportingCohort ? moment(patientWithMeta.startDate).format('LL') : null,\n      waitingTime: !isReportingCohort ? moment(patientWithMeta.startDate).fromNow() : null,\n      location: location && location.name,\n      phoneNumber: '0700xxxxxx',\n      hivResult: 'None',\n      actions: (\n        <OverflowMenu flipped>\n          {form ? (\n            <LaunchableFormMenuItem\n              patientUuid={patientUuid}\n              launchableForm={launchableForm}\n              form={applyFormIntent(launchableForm.intent, form)}\n              encounterType={launchableForm.encounterType || associatedEncounterType}\n              key={patientUuid}\n            />\n          ) : (\n            <></>\n          )}\n          <AddPatientToListOverflowMenuItem patientUuid={patientUuid} displayText=\"Move to list\" />\n        </OverflowMenu>\n      ),\n    };\n  };\n\n  const updatePatientTable = (fullDataset, start, itemCount) => {\n    let currentRows = [];\n\n    for (let i = start; i < start + itemCount; i++) {\n      if (i < fullDataset.length) {\n        currentRows.push(fullDataset[i]);\n      }\n    }\n\n    setPatients(currentRows);\n  };\n\n  useEffect(() => {\n    if (!isReportingCohort) {\n      getCohort(cohortId, 'full').then(results => {\n        const patients = results.cohortMembers.map(member => ({\n          ...constructPatient(member),\n          ...setListMeta(member, results.location),\n        }));\n\n        //Fix to enable pagination\n        setAllPatients(patients);\n        updatePatientTable(patients, 0, pageSize);\n\n        setIsLoading(false);\n        setLoadedPatients(true);\n      });\n    } else {\n      getReportingCohortMembers(cohortId, queryParams).then(results => {\n        const patients = results.map(({ data }) => {\n          return {\n            ...constructPatient(data),\n            ...setListMeta(data, null),\n          };\n        });\n\n        //Fix to enable Pagination\n        setAllPatients(patients);\n        updatePatientTable(patients, 0, pageSize);\n\n        setIsLoading(false);\n        setLoadedPatients(true);\n      });\n    }\n  }, [cohortId]);\n\n  useEffect(() => {\n    if (patients.length && associatedEncounterType && !loadedEncounters) {\n      Promise.all(patients.map(patient => fetchPatientLastEncounter(patient.uuid, associatedEncounterType))).then(\n        results => {\n          results.forEach((encounter, index) => {\n            patients[index].latestEncounter = encounter;\n            if (index == patients.length - 1) {\n              setPatients([...patients]);\n              setLoadedEncounters(true);\n            }\n          });\n        },\n      );\n    }\n    setPatientsCount(allPatients.length);\n  }, [loadedPatients]);\n\n  useEffect(() => {\n    const fetchHivResults = excludeColumns ? !excludeColumns.includes('hivResult') : true;\n    if ((loadedEncounters || !associatedEncounterType) && !loadedHIVStatuses && fetchHivResults) {\n      Promise.all(patients.map(patient => fetchPatientsFinalHIVStatus(patient.uuid))).then(results => {\n        results.forEach((hivResult, index) => {\n          patients[index].hivResult = hivResult;\n          if (index == patients.length - 1) {\n            setPatients([...patients]);\n            setLoadedHIVStatuses(true);\n          }\n        });\n      });\n    }\n  }, [patients, loadedEncounters]);\n\n  const pagination = useMemo(() => {\n    return {\n      usePagination: true,\n      currentPage: currentPage,\n      onChange: ({ pageSize, page }) => {\n        let startOffset = (page - 1) * pageSize;\n        updatePatientTable(allPatients, startOffset, pageSize);\n\n        setCurrentPage(page);\n        setPageSize(pageSize);\n        return null;\n      },\n      pageSize: pageSize,\n      totalItems: patientsCount,\n    };\n  }, [currentPage, pageSize, patientsCount]);\n\n  const handleSearch = useCallback(\n    searchTerm => {\n      setSearchTerm(searchTerm);\n      const filtrate = filterPatientsByName(searchTerm, patients);\n      setFilteredResults(filtrate);\n      return true;\n    },\n    [patients],\n  );\n\n  useEffect(() => {\n    attach(cohortSlotName, 'patient-table');\n    return () => {\n      detach(cohortSlotName, 'patient-table');\n    };\n  });\n\n  const state = useMemo(() => {\n    let filteredColumns = [...columns];\n    if (excludeColumns) {\n      filteredColumns = columns.filter(c => !excludeColumns.includes(c.key));\n    }\n    if (otherColumns) {\n      otherColumns.forEach(column => {\n        if (column.index) {\n          filteredColumns.splice(column.index, 0, column);\n        } else {\n          filteredColumns.push(column);\n        }\n      });\n    }\n    // position column designated to be at the last index\n    const index = filteredColumns.findIndex(column => column.key == columnAtLastIndex);\n    if (index) {\n      const column = filteredColumns[index];\n      filteredColumns.splice(index, 1);\n      filteredColumns.push(column);\n    }\n\n    return {\n      patients: searchTerm ? filteredResults : patients,\n      columns: filteredColumns,\n      isLoading,\n      search: {\n        placeHolder: 'Search client list',\n        onSearch: searchTerm => {\n          if (!searchTerm) {\n            // clear value\n            setSearchTerm('');\n          }\n        },\n        currentSearchTerm: searchTerm,\n        otherSearchProps: {\n          onKeyDown: e => {\n            if (e.keyCode == 13) {\n              handleSearch(e.target.value);\n            }\n          },\n          autoFocus: true,\n        },\n      },\n      pagination: pagination,\n      autoFocus: true,\n    };\n  }, [searchTerm, filteredResults, patients, handleSearch, pagination, isLoading, excludeColumns, otherColumns]);\n\n  useEffect(() => {\n    setCounter(counter + 1);\n  }, [state]);\n\n  return (\n    <div className={styles.table1}>\n      {!isLoading && !patients.length ? (\n        <TableEmptyState tableHeaders={state.columns} message=\"There are no patients in this list.\" />\n      ) : (\n        <>\n          <ExtensionSlot extensionSlotName={cohortSlotName} state={state} key={counter} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CohortPatientList;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \":root{--brand-01: #005d5d;--brand-02: #004144;--brand-light-01: #007d79}.esm-ohri-hiv__patient-list-cohort__productiveHeading01___2xzUz{font-size:.875rem;font-weight:600;line-height:1.29;letter-spacing:.16px}.esm-ohri-hiv__patient-list-cohort__productiveHeading02___2XlYI{font-size:1rem;font-weight:600;line-height:1.375;letter-spacing:0}.esm-ohri-hiv__patient-list-cohort__productiveHeading03___2U9JT{font-size:1.25rem;font-weight:400;line-height:1.4;letter-spacing:0}.esm-ohri-hiv__patient-list-cohort__productiveHeading04___1sndE{font-size:1.75rem;font-weight:400;line-height:1.29;letter-spacing:0}.esm-ohri-hiv__patient-list-cohort__productiveHeading05___3NNLG{font-size:2rem;font-weight:400;line-height:1.25;letter-spacing:0}.esm-ohri-hiv__patient-list-cohort__productiveHeading06___1tgd3{font-size:2rem;font-weight:300;line-height:1.199;letter-spacing:0}.esm-ohri-hiv__patient-list-cohort__bodyShort01___aFwIr{font-size:.875rem;font-weight:400;line-height:1.29;letter-spacing:.16px}.esm-ohri-hiv__patient-list-cohort__helperText01___1Ezg9{font-size:.75rem;line-height:1.34;letter-spacing:.32px}.esm-ohri-hiv__patient-list-cohort__bodyShort02___1Z2oX{font-size:1rem;font-weight:400;line-height:1.375;letter-spacing:0}.esm-ohri-hiv__patient-list-cohort__bodyLong01___KEHaG{font-size:.875rem;font-weight:400;line-height:1.43;letter-spacing:.16px}.esm-ohri-hiv__patient-list-cohort__bodyLong02___3ZaxR{font-size:1rem;font-weight:400;line-height:1.5;letter-spacing:0}.esm-ohri-hiv__patient-list-cohort__label01___2YUAj{font-size:.75rem;font-weight:400;line-height:1.34;letter-spacing:.32px}.esm-ohri-hiv__patient-list-cohort__text01___2p1jb{color:#161616}.esm-ohri-hiv__patient-list-cohort__text02___12VaQ{color:#525252}aside{background-color:#fff !important}.esm-ohri-hiv__patient-list-cohort__contentSwitcherWrapper___1b2pD{padding-bottom:50px}.esm-ohri-hiv__patient-list-cohort__contentSwitcherWrapper___1b2pD>div{width:150px;float:right}.esm-ohri-hiv__patient-list-cohort__contentSwitcherWrapper___1b2pD button[aria-selected=true]{background-color:#007d79}\", \"\"]);\n// Exports\nexports.locals = {\n\t\"productiveHeading01\": \"esm-ohri-hiv__patient-list-cohort__productiveHeading01___2xzUz\",\n\t\"productiveHeading02\": \"esm-ohri-hiv__patient-list-cohort__productiveHeading02___2XlYI\",\n\t\"productiveHeading03\": \"esm-ohri-hiv__patient-list-cohort__productiveHeading03___2U9JT\",\n\t\"productiveHeading04\": \"esm-ohri-hiv__patient-list-cohort__productiveHeading04___1sndE\",\n\t\"productiveHeading05\": \"esm-ohri-hiv__patient-list-cohort__productiveHeading05___3NNLG\",\n\t\"productiveHeading06\": \"esm-ohri-hiv__patient-list-cohort__productiveHeading06___1tgd3\",\n\t\"bodyShort01\": \"esm-ohri-hiv__patient-list-cohort__bodyShort01___aFwIr\",\n\t\"helperText01\": \"esm-ohri-hiv__patient-list-cohort__helperText01___1Ezg9\",\n\t\"bodyShort02\": \"esm-ohri-hiv__patient-list-cohort__bodyShort02___1Z2oX\",\n\t\"bodyLong01\": \"esm-ohri-hiv__patient-list-cohort__bodyLong01___KEHaG\",\n\t\"bodyLong02\": \"esm-ohri-hiv__patient-list-cohort__bodyLong02___3ZaxR\",\n\t\"label01\": \"esm-ohri-hiv__patient-list-cohort__label01___2YUAj\",\n\t\"text01\": \"esm-ohri-hiv__patient-list-cohort__text01___2p1jb\",\n\t\"text02\": \"esm-ohri-hiv__patient-list-cohort__text02___12VaQ\",\n\t\"contentSwitcherWrapper\": \"esm-ohri-hiv__patient-list-cohort__contentSwitcherWrapper___1b2pD\"\n};\nmodule.exports = exports;\n"],"names":["BASE_WS_API_URL","fetchLastVisit","uuid","openmrsFetch","fetchPatientList","offSet","pageSize","fetchTodayClients","date","moment","format","then","data","entry","length","cleanDuplicatePatientReferences","fetchPatientsFromObservationCodeConcept","codeConcept","valueConcept","cutOffDays","endDate","startDate","subtract","patientRefs","map","enc","resource","subject","reference","Set","Array","from","Promise","all","ref","async","getCohort","cohortUuid","version","cohortMembers","filter","member","voided","getReportingCohort","queryParams","params","join","url","getReportingCohortMembers","members","getCohorts","cohortTypeUuid","results","error","cohort","addPatientToCohort","patientUuid","method","headers","body","patient","Date","evictCohortMembership","membershipUuid","getPatientListsForPatient","membership","fetchPatientsFinalHIVStatus","patientUUID","finalHIVCodeConcept","finalPositiveHIVValueConcept","valueCodeableConcept","coding","display","fetchPatientComputedConcept_HIV_Status","computedHIV_StatusConcept","fetchPatientLastEncounter","encounterType","query","encounterRepresentation","fetchConceptNameByUuid","conceptUuid","tableHeaders","message","style","marginLeft","rows","isSortable","size","useZebraStyles","getHeaderProps","getTableProps","header","content","colSpan","AddPatientToListModal","isOpen","close","cohortType","title","cohorts","setCohorts","useState","alreadySubscribedCohorts","setAlreadySubscribedCohorts","currentMemberships","setCurrentMemberships","isLoading","setIsLoading","selectedList","setSelectedList","isSubmitting","setIsSubmitting","useEffect","allCohortsRes","currentCohortMemberships","filteredCohorts","some","availableLists","useMemo","controls","index","labelText","name","value","id","key","push","loader","width","alreadySubscribedLists","marginBottom","color","fontSize","handleSubmit","useCallback","showToast","kind","critical","description","catch","response","ok","zIndex","open","modalHeading","modalLabel","onRequestClose","passiveModal","primaryButtonText","secondaryButtonText","onRequestSubmit","primaryButtonDisabled","paddingLeft","legendText","orientation","onChange","selected","toString","displayText","useCurrentPatient","setIsOpen","patientDisplay","given","family","className","role","onClick","maxWidth","_excluded","InlineLoading","_ref","success","_ref$status","status","iconDescription","onSuccess","successDelay","other","prefix","usePrefix","loadingClasses","concat","loadingText","loading","setTimeout","Loading","small","withOverlay","active","loadingAnimation","propTypes","deprecate","defaultProps","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","undefined","columns","getValue","link","getUrl","timeAddedToList","waitingTime","gender","location","age","phoneNumber","hivResult","actions","LaunchableFormMenuItem","launchableForm","form","actionText","setActionText","encounterUuid","setEncounterUuid","continueEncounterActionText","editActionText","editLatestEncounter","lastHtsEncounter","margin","OverflowMenuItem","itemText","launchFormInEditMode","launchForm","navigate","to","basePath","cohortId","cohortSlotName","isReportingCohort","otherColumns","excludeColumns","associatedEncounterType","patients","setPatients","loadedPatients","setLoadedPatients","loadedEncounters","setLoadedEncounters","loadedHIVStatuses","setLoadedHIVStatuses","currentPage","setCurrentPage","setPageSize","patientsCount","setPatientsCount","searchTerm","setSearchTerm","counter","setCounter","filteredResults","setFilteredResults","allPatients","setAllPatients","getForm","package","constructPatient","rawPatient","person","dashboard","targetDashboard","identifiers","identifier","birthdate","birthday","setListMeta","patientWithMeta","fromNow","OverflowMenu","flipped","applyFormIntent","intent","updatePatientTable","fullDataset","start","itemCount","currentRows","i","forEach","encounter","latestEncounter","fetchHivResults","includes","pagination","usePagination","page","totalItems","handleSearch","filtrate","toLowerCase","search","filterPatientsByName","attach","detach","state","filteredColumns","c","column","splice","findIndex","placeHolder","onSearch","currentSearchTerm","otherSearchProps","onKeyDown","e","keyCode","target","autoFocus","styles","ExtensionSlot","extensionSlotName","exports","___CSS_LOADER_API_IMPORT___","module","locals"],"sourceRoot":""}